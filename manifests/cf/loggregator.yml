---
instance_groups:
- name: doppler
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            doppler: { name: doppler }

  - name: doppler
    release: loggregator
    provides:
      doppler: {as: doppler, shared: true}
    properties:
      doppler_endpoint:
        shared_secret: (( grab meta.loggregator.endpoint_secret ))
      doppler:
        disable_announce: true
        etcd: (( grab meta.certs.etcd.client ))
      loggregator:
        disable_syslog_drains: true
        tls:
          ca_cert: (( grab meta.certs.loggregator.ca ))
          doppler: (( grab meta.certs.loggregator.doppler.server ))
        etcd:
          require_ssl: true
          ca_cert: (( grab meta.certs.etcd.ca ))
          machines: (( grab meta.cf-etcd.machines ))

          
#####################################
#       TRAFFIC CONTROLLER          #
#####################################
- name: loggregator_trafficcontroller
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            loggregator_trafficcontroller: {}

  - name: loggregator_trafficcontroller
    release: loggregator
    consumes:
      doppler: {from: doppler}
    properties:
      system_domain: (( grab params.system_domain ))
      cc:
        tls_port: (( grab meta.cc.tls_port ))
        internal_service_hostname: cloud-controller-ng.service.cf.internal
        mutual_tls:
          ca_cert: (( grab meta.cc.mutual_tls.ca_cert ))
      ssl:
        skip_cert_verify: (( grab params.skip_ssl_validation ))
      loggregator:
        tls:
          ca_cert: (( grab meta.certs.loggregator.ca ))
          trafficcontroller: (( grab meta.certs.loggregator.trafficcontroller.server ))
          cc_trafficcontroller: (( grab meta.certs.diego.capi.client ))
        uaa:
          client_secret: (( grab meta.uaa.doppler_secret ))
        etcd:
          ca_cert: (( grab meta.certs.etcd.ca ))
          require_ssl: true
          machines: (( grab meta.cf-etcd.machines ))
      traffic_controller:
        etcd: (( grab meta.certs.etcd.client ))
      uaa:
        internal_url: (( grab meta.uaa.internal_url ))
        ca_cert: (( grab meta.certs.uaa.ca ))

  - name: reverse_log_proxy
    release: loggregator
    provides:
      reverse_log_proxy: {as: reverse_log_proxy, shared: true}
    properties:
      loggregator:
        tls:
          ca_cert: (( grab meta.certs.loggregator.ca ))
          reverse_log_proxy: (( grab meta.certs.loggregator.syslogger.rlp ))

  - name: route_registrar
    release: routing
    properties:
      route_registrar:
        routes:
        - name: loggregator
          port: 8080
          registration_interval: 20s
          uris:
          - (( concat "loggregator." params.system_domain ))
        - name: doppler
          port: 8081
          registration_interval: 20s
          uris:
          - (( concat "doppler." params.system_domain ))
          - (( concat "*.doppler." params.system_domain ))

meta:
  loggregator:
    endpoint_secret:        (( vault meta.vault "/loggregator/endpoint:secret" ))