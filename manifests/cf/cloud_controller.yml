---
instance_groups:
- name: api
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            cloud_controller_ng: {}
            policy-server-internal:
              name: policy-server # health check scripts are located at `/var/vcap/jobs/policy-server`, hence the rename.

  - { name: java-buildpack,          release: java-buildpack }
  - { name: go-buildpack,            release: go-buildpack }
  - { name: binary-buildpack,        release: binary-buildpack }
  - { name: nodejs-buildpack,        release: nodejs-buildpack }
  - { name: ruby-buildpack,          release: ruby-buildpack }
  - { name: php-buildpack,           release: php-buildpack }
  - { name: python-buildpack,        release: python-buildpack }
  - { name: staticfile-buildpack,    release: staticfile-buildpack }
  - { name: dotnet-core-buildpack,   release: dotnet-core-buildpack }

  - name: cloud_controller_ng
    release: capi
    provides: { cloud_controller: { as: cloud_controller, shared: true } }
    properties:
      app_domains: (( grab params.apps_domains ))
      system_domain: (( grab params.system_domain ))
      app_ssh:
        host_key_fingerprint: (( vault meta.vault "/ssh_proxy/host_key:fingerprint" ))
        oauth_client_id: ssh-proxy
      ccdb: (( grab meta.ccdb ))
      cc: (( grab meta.cc ))
      logger_endpoint:
        port: (( grab params.logger_port ))
      uaa:
        ca_cert: (( grab meta.certs.uaa.ca ))
        clients:
          cc-service-dashboards:
            scope: openid,cloud_controller_service_permissions.read
            secret: (( grab meta.uaa.cc_broker_secret ))
          cc_service_key_client:
            secret: (( grab meta.uaa.cc_service_key_client_secret ))
          cc_routing:
            secret: (( grab meta.uaa.cc_routing_secret ))
          cloud_controller_username_lookup:
            secret: (( grab meta.uaa.cc_user_lookup_secret ))
        url: (( grab meta.uaa.url ))

  - name: cloud_controller_worker
    release: capi
    properties:
      app_domains: (( grab params.apps_domains ))
      system_domain: (( grab params.system_domain ))
      ccdb: (( grab meta.ccdb ))
      cc: (( grab meta.cc ))
      logger_endpoint:
        port: (( grab params.logger_port ))
      uaa:
        ca_cert: (( grab meta.certs.uaa.ca ))
        clients:
          cc-service-dashboards:
            scope: openid,cloud_controller_service_permissions.read
            secret: (( grab meta.uaa.cc_broker_secret ))
          cc_routing:
            secret: (( grab meta.uaa.cc_routing_secret ))
        url: (( grab meta.uaa.url ))

  - name: cloud_controller_clock
    release: capi
    properties:
      app_domains: (( grab params.apps_domains ))
      system_domain: (( grab params.system_domain ))
      ccdb: (( grab meta.ccdb ))
      cc: (( grab meta.cc ))
      logger_endpoint:
        port: (( grab params.logger_port ))
      uaa:
        clients:
          cc-service-dashboards:
            scope: openid,cloud_controller_service_permissions.read
            secret: (( grab meta.uaa.cc_broker_secret ))

  - name: statsd_injector
    release: statsd-injector
    properties: (( grab meta.statsd_injector ))

  - name: route_registrar
    release: routing
    properties:
      route_registrar:
        routes:
        - name: api
          port: 9022
          registration_interval: 20s
          tags:
            component: CloudController
          uris:
          - (( grab meta.api_hostname ))
        - name: policy-server
          port: 4002
          registration_interval: 20s
          uris:
          - (( concat meta.api_hostname "/networking" ))

  - name: policy-server
    release: cf-networking
    properties:
      cf_networking:
        policy_server:
          uaa_client_secret: (( vault meta.vault "/uaa/client_secrets:network_policy" ))
          uaa_ca: (( grab meta.certs.uaa.ca ))
          database:
            type: (( grab params.policyserverdb_scheme ))
            username: (( grab params.policyserverdb_user ))
            password: (( grab params.policyserverdb_password ))
            host: (( grab params.policyserverdb_host ))
            port: (( grab params.policyserverdb_port ))
            name: (( grab params.policyserverdb_name ))
    
  - name: policy-server-internal
    release: cf-networking
    properties:
      cf_networking:
        policy_server_internal:
          ca_cert: (( grab meta.certs.network_policy.ca ))
          server_cert: (( grab meta.certs.network_policy.server_cert ))
          server_key: (( grab meta.certs.network_policy.server_key ))

meta:
  api_hostname: (( concat "api." params.system_domain ))

  ccdb:
    address: (( grab params.ccdb_host ))
    databases:
    - name: (( grab params.ccdb_name ))
      citext: true
      tag: cc
    db_scheme: (( grab params.ccdb_scheme ))
    port: (( grab params.ccdb_port ))
    roles:
    - name: (( grab params.ccdb_user ))
      password: (( grab params.ccdb_password ))
      tag: admin

  cc:
    tls_port: 9023
    directory_key:           (( vault meta.vault "/cc:directory_key" ))
    bulk_api_user:           bulk_api_user
    bulk_api_password:       (( vault meta.vault "/cc:bulk_api" ))
    internal_api_user:       internal_api_user
    internal_api_password:   (( vault meta.vault "/cc:internal_api" ))
    staging_upload_user:     staging_upload_user
    staging_upload_password: (( vault meta.vault "/cc:staging_upload" ))
    db_encryption_key:       (( vault meta.vault "/cc:db_encryption_key" ))
    mutual_tls:
      ca_cert: (( grab meta.certs.diego.ca ))
      .: (( inject meta.certs.diego.capi.server ))
    buildpacks:
      .: (( inject meta.blobstore_config ))
      buildpack_directory_key: (( concat params.env "-cc-buildpacks-" meta.cc.directory_key ))
    db_logging_level: debug2 # Sets the log level of the DB log messages, doesn't filter. if set at or above the logging_level, DB query logs will appear
    logging_level: (( grab params.log_level )) # Filters log messages output to info or higher

    default_app_memory: (( grab params.default_app_memory ))
    default_app_disk_in_mb: (( grab params.default_app_disk_in_mb ))
    default_running_security_groups:
    - public_networks
    - dns
    - services
    - load_balancer
    default_staging_security_groups:
    - public_networks
    - dns
    - services
    - load_balancer
    default_to_diego_backend: true

    droplets:
      .: (( inject meta.blobstore_config ))
      droplet_directory_key: (( concat params.env "-cc-droplets-" meta.cc.directory_key ))
      max_staged_droplets_stored: null
    install_buildpacks:
    - name: staticfile_buildpack
      package: staticfile-buildpack
    - name: java_buildpack
      package: java-buildpack
    - name: ruby_buildpack
      package: ruby-buildpack
    - name: nodejs_buildpack
      package: nodejs-buildpack
    - name: go_buildpack
      package: go-buildpack
    - name: python_buildpack
      package: python-buildpack
    - name: php_buildpack
      package: php-buildpack
    - name: binary_buildpack
      package: binary-buildpack
    - name: dotnet_core_buildpack
      package: dotnet-core-buildpack
    packages:
      .: (( inject meta.blobstore_config ))
      app_package_directory_key: (( concat params.env "-cc-packages-" meta.cc.directory_key ))
    quota_definitions:
      default:
        memory_limit: 102400
        non_basic_services_allowed: true
        total_reserved_route_ports: 100
        total_routes: 1000
        total_service_keys: 1000
        total_services: 100
    resource_pool:
      .: (( inject meta.blobstore_config ))
      resource_directory_key: (( concat params.env "-cc-resources-" meta.cc.directory_key ))
    security_group_definitions:
    - name: public_networks
      rules:
      - destination: 0.0.0.0-9.255.255.255
        protocol: all
      - destination: 11.0.0.0-169.253.255.255
        protocol: all
      - destination: 169.255.0.0-172.15.255.255
        protocol: all
      - destination: 172.32.0.0-192.167.255.255
        protocol: all
      - destination: 192.169.0.0-255.255.255.255
        protocol: all
    - name: dns
      rules:
      - destination: 0.0.0.0/0
        ports: "53"
        protocol: tcp
      - destination: 0.0.0.0/0
        ports: "53"
        protocol: udp
    - name: services
      rules: (( grab params.app_services_networks ))
    - name: load_balancer
      rules: (( grab params.cf_public_ips ))

    volume_services_enabled: true

  statsd_injector:
    loggregator:
      tls:
        ca_cert: (( grab meta.certs.loggregator.ca ))
        statsd_injector:
          cert: (( grab meta.certs.loggregator.statsdinjector.server.cert ))
          key: (( grab meta.certs.loggregator.statsdinjector.server.key ))
    statsd_injector:
      deployment: (( grab params.system_domain ))
