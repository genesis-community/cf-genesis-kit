---
instance_groups:
  - name: api
    jobs:
      - { name: java-buildpack,          release: java-buildpack }
      - { name: go-buildpack,            release: go-buildpack }
      - { name: binary-buildpack,        release: binary-buildpack }
      - { name: nodejs-buildpack,        release: nodejs-buildpack }
      - { name: ruby-buildpack,          release: ruby-buildpack }
      - { name: php-buildpack,           release: php-buildpack }
      - { name: python-buildpack,        release: python-buildpack }
      - { name: staticfile-buildpack,    release: staticfile-buildpack }
      - { name: dotnet-core-buildpack,   release: dotnet-core-buildpack }

      - name: cloud_controller_ng
        release: capi
        provides: { cloud_controller: { as: cloud_controller, shared: true } }
        properties:
          app_domains:   (( grab params.apps_domains ))
          system_domain: (( grab params.system_domain ))

          app_ssh:
            host_key_fingerprint: (( vault meta.vault "/ssh_proxy/host_key:fingerprint" ))
            oauth_client_id: ssh-proxy

          ccdb: (( grab meta.ccdb ))
          cc:   (( grab meta.cc ))

          doppler:
            port: (( grab params.logger_port ))
          logger_endpoint:
            port: (( grab params.logger_port ))

          uaa:
            url:     (( grab meta.uaa.url ))
            ca_cert: (( grab meta.certs.uaa.ca ))
            clients:
              cc-service-dashboards:
                scope: openid,cloud_controller_service_permissions.read
                secret: (( grab meta.uaa.cc_broker_secret ))
              cc_service_key_client:
                secret: (( grab meta.uaa.cc_service_key_client_secret ))
              cc_routing:
                secret: (( grab meta.uaa.cc_routing_secret ))
              cloud_controller_username_lookup:
                secret: (( grab meta.uaa.cc_user_lookup_secret ))
          
          router:
            route_services_secret: (( vault meta.vault "/gorouter/route_services:secret" ))

      - name: cloud_controller_worker
        release: capi
        properties:
          app_domains:   (( grab params.apps_domains ))
          system_domain: (( grab params.system_domain ))

          ccdb: (( grab meta.ccdb ))
          cc:   (( grab meta.cc ))

          logger_endpoint:
            port: (( grab params.logger_port ))

          uaa:
            url:     (( grab meta.uaa.url ))
            ca_cert: (( grab meta.certs.uaa.ca ))
            clients:
              cc-service-dashboards:
                scope: openid,cloud_controller_service_permissions.read
                secret: (( grab meta.uaa.cc_broker_secret ))
              cc_routing:
                secret: (( grab meta.uaa.cc_routing_secret ))

      - name: cloud_controller_clock
        release: capi
        properties:
          app_domains:   (( grab params.apps_domains ))
          system_domain: (( grab params.system_domain ))

          ccdb: (( grab meta.ccdb ))
          cc:   (( grab meta.cc ))

          logger_endpoint:
            port: (( grab params.logger_port ))

          uaa:
            clients:
              cc-service-dashboards:
                scope: openid,cloud_controller_service_permissions.read
                secret: (( grab meta.uaa.cc_broker_secret ))

      - name: cc_deployment_updater
        release: capi
        properties:
          ccdb: (( grab meta.ccdb ))
          cc:
            db_encryption_key: (( vault meta.vault "/cc:db_encryption_key" ))
            temporary_disable_deployments: (( grab meta.cc.temporary_disable_deployments ))
            mutual_tls:
              ca_cert: (( grab meta.certs.diego.ca ))
              private_key: (( vault meta.vault "/diego/certs/cc_deployment_updater_server:key" ))
              public_cert: (( vault meta.vault "/diego/certs/cc_deployment_updater:certificate" ))

      - name: statsd_injector
        release: statsd-injector
        properties: (( grab meta.statsd_injector ))

      - name: file_server
        release: diego
        properties:
          bpm:
            enabled: true
          logging:
            format:
              timestamp: "rfc3339"
          loggregator:
            use_v2_api: true
            ca_cert: (( grab meta.certs.loggregator.ca ))
            cert:    (( grab meta.certs.loggregator.metron.server.cert ))
            key:     (( grab meta.certs.loggregator.metron.server.key ))

      - name: route_registrar
        release: routing
        properties:
          route_registrar:
            routes:
              - name: api
                port: 9022
                registration_interval: 20s
                tags:
                  component: CloudController
                uris:
                  - (( grab meta.api_hostname ))
              - name: policy-server
                port: 4002
                registration_interval: 20s
                uris:
                  - (( concat meta.api_hostname "/networking" ))

      - name: policy-server
        release: cf-networking
        properties:
          uaa_client_secret: (( vault meta.vault "/uaa/client_secrets:network_policy" ))
          uaa_ca: (( grab meta.certs.uaa.ca ))

          enable_space_developer_self_service: true

          database:
            type:     (( grab params.policyserverdb_scheme ))
            username: (( grab params.policyserverdb_user ))
            password: (( grab params.policyserverdb_password ))
            host:     (( grab params.policyserverdb_host ))
            port:     (( grab params.policyserverdb_port ))
            name:     (( grab params.policyserverdb_name ))

      - name: policy-server-internal
        release: cf-networking
        properties:
          ca_cert:     (( grab meta.certs.network_policy.ca ))
          server_cert: (( grab meta.certs.network_policy.server_cert ))
          server_key:  (( grab meta.certs.network_policy.server_key ))

meta:
  api_hostname: (( concat "api." params.system_domain ))

  ccdb:
    address:   (( grab params.ccdb_host ))
    db_scheme: (( grab params.ccdb_scheme ))
    port:      (( grab params.ccdb_port ))

    databases:
      - name:   (( grab params.ccdb_name ))
        citext: true
        tag:    cc
    roles:
      - name:     (( grab params.ccdb_user ))
        password: (( grab params.ccdb_password ))
        tag:      admin

  cc:
    tls_port: 9023
    directory_key:           (( vault meta.vault "/cc:directory_key" ))
    bulk_api_user:           bulk_api_user
    bulk_api_password:       (( vault meta.vault "/cc:bulk_api" ))
    internal_api_user:       internal_api_user
    internal_api_password:   (( vault meta.vault "/cc:internal_api" ))
    staging_upload_user:     staging_upload_user
    staging_upload_password: (( vault meta.vault "/cc:staging_upload" ))
    db_encryption_key:       (( vault meta.vault "/cc:db_encryption_key" ))
    temporary_use_logcache:  true

    # we put log-cache on the LTC, not on the dopplers, so the
    # default from the capi-release is insufficient
    logcache:
      host: loggregator-trafficcontroller.service.cf.internal
      port: 8080

    logcache_tls:
      certificate: (( vault meta.vault "/loggregator/certs/log_cache:certificate" ))
      private_key: (( vault meta.vault "/loggregator/certs/log_cache:key" ))
    public_tls:
      ca_cert: (( grab meta.certs.diego.public_tls.certificate ))
      .: (( inject meta.certs.diego.public_tls ))
    mutual_tls:
      ca_cert: (( grab meta.certs.diego.ca ))
      .: (( inject meta.certs.diego.capi.server ))
    db_logging_level: debug2 # Sets the log level of the DB log messages, doesn't filter. if set at or above the logging_level, DB query logs will appear
    logging_level: (( grab params.log_level )) # Filters log messages output to info or higher

    default_app_memory: (( grab params.default_app_memory ))
    default_app_disk_in_mb: (( grab params.default_app_disk_in_mb ))
    default_to_diego_backend: true
    default_running_security_groups:
      - public_networks
      - dns
      - services
      - load_balancer
    default_staging_security_groups:
      - public_networks
      - dns
      - services
      - load_balancer

    buildpacks:
      .: (( inject meta.blobstore_config ))
      buildpack_directory_key: (( concat params.env "-cc-buildpacks-" meta.cc.directory_key ))
    droplets:
      .: (( inject meta.blobstore_config ))
      droplet_directory_key: (( concat params.env "-cc-droplets-" meta.cc.directory_key ))
      max_staged_droplets_stored: null
    resource_pool:
      .: (( inject meta.blobstore_config ))
      resource_directory_key: (( concat params.env "-cc-resources-" meta.cc.directory_key ))
    packages:
      .: (( inject meta.blobstore_config ))
      app_package_directory_key: (( concat params.env "-cc-packages-" meta.cc.directory_key ))

    stacks:
      - name: cflinuxfs3
        description: Cloud Foundry Linux-based filesystem (Ubuntu 18.04)
    default_stack: (( grab params.default_stack ))
    diego:
      docker_staging_stack: (( grab params.default_stack ))
    install_buildpacks:
      - { name: staticfile_buildpack,  package: staticfile-buildpack-cflinuxfs3  }
      - { name: java_buildpack,        package: java-buildpack-cflinuxfs3        }
      - { name: ruby_buildpack,        package: ruby-buildpack-cflinuxfs3        }
      - { name: dotnet_core_buildpack, package: dotnet-core-buildpack-cflinuxfs3 }
      - { name: nodejs_buildpack,      package: nodejs-buildpack-cflinuxfs3      }
      - { name: go_buildpack,          package: go-buildpack-cflinuxfs3          }
      - { name: python_buildpack,      package: python-buildpack-cflinuxfs3      }
      - { name: php_buildpack,         package: php-buildpack-cflinuxfs3         }
      - { name: nginx_buildpack,       package: nginx-buildpack-cflinuxfs3       }
      - { name: r_buildpack,           package: r-buildpack-cflinuxfs3           }
      - { name: binary_buildpack,      package: binary-buildpack-cflinuxfs3      }

    quota_definitions:
      default:
        memory_limit: 102400
        non_basic_services_allowed: true
        total_reserved_route_ports: 100
        total_routes: 1000
        total_service_keys: 1000
        total_services: 100

    security_group_definitions:
      - name: public_networks
        rules:
          - { protocol: all, destination: 0.0.0.0-9.255.255.255       }
          - { protocol: all, destination: 11.0.0.0-169.253.255.255    }
          - { protocol: all, destination: 169.255.0.0-172.15.255.255  }
          - { protocol: all, destination: 172.32.0.0-192.167.255.255  }
          - { protocol: all, destination: 192.169.0.0-255.255.255.255 }
      - name: dns
        rules:
          - { protocol: tcp, ports: "53", destination: 0.0.0.0/0 }
          - { protocol: udp, ports: "53", destination: 0.0.0.0/0 }
      - name: services
        rules: (( grab params.app_services_networks ))
      - name: load_balancer
        rules: (( grab params.cf_public_ips ))

    volume_services_enabled: true
    temporary_disable_deployments: (( grab params.temporary_disable_cc_deployments || "false" ))

  statsd_injector:
    enable_consul_service_registration: false
    loggregator:
      tls:
        ca_cert: (( grab meta.certs.loggregator.ca ))
        statsd_injector:
          cert: (( grab meta.certs.loggregator.statsdinjector.server.cert ))
          key:  (( grab meta.certs.loggregator.statsdinjector.server.key ))
    statsd_injector:
      deployment: (( grab params.system_domain ))
