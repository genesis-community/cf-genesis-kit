---
meta:
  admin:
    user:     admin
    password: (( vault meta.vault "/admin_user:password" ))

  branding:
    product_logo:       (( grab params.cf_branding_product_logo       || nil ))
    square_logo:        (( grab params.cf_branding_square_logo        || nil ))
    footer_legal_text:  (( grab params.cf_branding_footer_legal_text  || nil ))
    footer_links:       (( grab params.cf_branding_footer_links       || nil ))

  uaa:
    url: (( concat "https://uaa." params.system_domain ))
    ssl_port: 8443
    internal_url: "https://uaa.service.cf.internal:8443"
    failure_count:         (( grab params.uaa_lockout_failure_count          || 5 ))
    failure_timeout:       (( grab params.uaa_lockout_punishment_time        || 300 ))
    time_between_failures: (( grab params.uaa_lockout_time_between_failures  || 1200 ))

    refresh_token_validity: (( grab params.uaa_refresh_token_validity        || 2592000 ))
    access_token_validity: (( grab params.uaa_access_token_validity        || 600 ))

    admin_client_secret:   (( vault meta.vault "/uaa/client_secrets:admin_client" ))
    app_autoscaler:        (( vault meta.vault "/uaa/client_secrets:app_autoscaler" ))
    cc_broker_secret:      (( vault meta.vault "/uaa/client_secrets:cc_broker" ))
    cc_routing_secret:     (( vault meta.vault "/uaa/client_secrets:cc_routing" ))
    cc_service_key_client_secret: (( vault meta.vault "/uaa/client_secrets:cc_service_key_client" ))
    cc_user_lookup_secret: (( vault meta.vault "/uaa/client_secrets:cc_user_lookup" ))
    doppler_secret:        (( vault meta.vault "/uaa/client_secrets:doppler" ))
    firehose_secret:       (( vault meta.vault "/uaa/client_secrets:firehose" ))
    gorouter_secret:       (( vault meta.vault "/uaa/client_secrets:gorouter" ))
    notifications_secret:  (( vault meta.vault "/uaa/client_secrets:notifications" ))
    ssh_proxy_secret:      (( vault meta.vault "/uaa/client_secrets:ssh_proxy" ))
    tcp_emitter_secret:    (( vault meta.vault "/uaa/client_secrets:tcp_emitter" ))
    tcp_router_secret:     (( vault meta.vault "/uaa/client_secrets:tcp_router" ))
    network_policy_secret: (( vault meta.vault "/uaa/client_secrets:network_policy" ))
    cf_smoke_tests:        (( vault meta.vault "/uaa/client_secrets:cf_smoke_tests" ))

    jwt_private_key:  (( vault meta.vault "/uaa/jwt_signing_key:private" ))

instance_groups:
  - name: uaa
    jobs:
      - name: uaa
        release: uaa
        properties:
          encryption:
            active_key_label: default_key
            encryption_keys:
              - label: default_key
                passphrase: (( vault meta.vault "/uaa/encryption_key:current" ))
          uaa:
            authentication:
              policy:
                lockoutAfterFailures: (( grab meta.uaa.failure_count ))
                countFailuresWithinSeconds: (( grab meta.uaa.time_between_failures ))
                lockoutPeriodSeconds: (( grab meta.uaa.failure_timeout ))
            admin:
              client_secret: (( grab meta.uaa.admin_client_secret ))
            clients:
              app_autoscaler:
                authorities: cloud_controller.read,cloud_controller.admin,uaa.resource
                authorized-grant-types: client_credentials
                scope: openid,cloud_controller_service_permissions.read
                secret: (( grab meta.uaa.app_autoscaler ))
              cc-service-dashboards:
                authorities: clients.read,clients.write,clients.admin
                authorized-grant-types: client_credentials
                scope: openid,cloud_controller_service_permissions.read
                secret: (( grab meta.uaa.cc_broker_secret ))
              cc_service_key_client:
                authorities: credhub.read,credhub.write
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.cc_service_key_client_secret ))
              cc_routing:
                authorities: routing.router_groups.read
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.cc_routing_secret ))
              cf:
                access-token-validity: (( grab  meta.uaa.access_token_validity ))
                authorities: uaa.none
                authorized-grant-types: password,refresh_token
                override: true
                refresh-token-validity: (( grab meta.uaa.refresh_token_validity ))
                scope: network.admin,network.write,cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write,cloud_controller.admin_read_only,cloud_controller.global_auditor,perm.admin,clients.read
                secret: ''
              cf_smoke_tests:
                authorities: cloud_controller.admin
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.cf_smoke_tests ))
              cloud_controller_username_lookup:
                authorities: scim.userids
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.cc_user_lookup_secret ))
              doppler:
                authorities: uaa.resource
                override: true
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.doppler_secret ))
              firehose:
                authorities: doppler.firehose,cloud_controller.admin
                authorized-grant-types: client_credentials #,refresh_token
                scope: openid,oauth.approvals,scim.userids,cloud_controller.read
                secret: (( grab meta.uaa.firehose_secret ))
              gorouter:
                authorities: routing.routes.read
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.gorouter_secret ))
              notifications:
                authorities: cloud_controller.admin,scim.read
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.notifications_secret ))
              ssh-proxy:
                authorized-grant-types: authorization_code
                autoapprove: true
                override: true
                redirect-uri: (( concat "https://uaa.system." params.system_domain "/login" ))
                scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
                secret: (( grab meta.uaa.ssh_proxy_secret ))
              tcp_emitter:
                authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.tcp_emitter_secret ))
              tcp_router:
                authorities: routing.routes.read,routing.router_groups.read
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.tcp_router_secret ))
              network-policy:
                authorities: uaa.resource,cloud_controller.admin_read_only
                authorized-grant-types: client_credentials
                secret: (( grab meta.uaa.network_policy_secret ))
            logging_level: (( grab params.log_level ))
            issuer: (( concat "https://uaa." params.system_domain ))
            jwt:
              policy:
                active_key_id: key-1
                keys:
                  key-1:
                    signingKey: (( grab meta.uaa.jwt_private_key ))
            scim:
              users:
                - name:     (( grab meta.admin.user ))
                  password: (( grab meta.admin.password ))
                  groups:
                    - cloud_controller.admin
                    - network.admin
                    - doppler.firehose
                    - openid
                    - routing.router_groups.read
                    - routing.router_groups.write
                    - scim.write
                    - scim.read
                    - clients.read
                    - clients.write
              groups:
                cloud_controller.read_only_admin: Read-only Administrative Access
                cloud_controller.global_auditor:  Global Auditor Access
                network.read:                     Read-only Network Policy Access
            sslCertificate: (( grab meta.certs.uaa.ssl.cert ))
            sslPrivateKey: (( grab meta.certs.uaa.ssl.key ))
            url: (( grab meta.uaa.url ))
            ssl:
              port: (( grab meta.uaa.ssl_port ))
            zones:
              internal:
                hostnames:
                  - uaa.service.cf.internal
          login:
            links:
              passwd: (( concat "https://login." params.system_domain "/forgot_password" ))
              signup: (( concat "https://login." params.system_domain "/create_account" ))
            branding:
              product_logo: (( grab meta.branding.product_logo ))
              square_logo: (( grab meta.branding.square_logo ))
              footer_legal_text: (( grab meta.branding.footer_legal_text ))
              footer_links: (( grab meta.branding.footer_links ))
            saml:
              activeKeyId: default_key
              keys:
                default_key:
                  certificate: (( grab meta.certs.uaa.login_saml.cert ))
                  key:         (( grab meta.certs.uaa.login_saml.key ))
                  passphrase:  ""
          uaadb:
            tls: disabled

            address:   (( grab params.uaadb_host ))
            db_scheme: (( grab params.uaadb_scheme ))
            port:      (( grab params.uaadb_port ))

            databases:
              - name: (( grab params.uaadb_name ))
                citext: true
                tag: uaa

            roles:
              - name: (( grab params.uaadb_user ))
                password: (( grab params.uaadb_password ))
                tag: admin

      - name: route_registrar
        release: routing
        properties:
          route_registrar:
            routes:
              - name: uaa
                tls_port: (( grab meta.uaa.ssl_port ))
                server_cert_domain_san: uaa.service.cf.internal

                registration_interval: 10s
                tags:
                  component: uaa

                health_check:
                  name: uaa-healthcheck
                  script_path: /var/vcap/jobs/uaa/bin/dns/healthy

                uris:
                  - (( concat "uaa." params.system_domain ))
                  - (( concat "*.uaa." params.system_domain ))
                  - (( concat "login." params.system_domain ))
                  - (( concat "*.login." params.system_domain ))

      - name: statsd_injector
        release: statsd-injector
        properties: (( grab meta.statsd_injector ))
