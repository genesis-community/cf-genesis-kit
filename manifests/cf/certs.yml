---
# This file should abstract out the cert paths in the vault
#
# The structure of the CA hierarchy is maintained, but where useful, a link to
# the ca for each cert/key pairing is also provided, as either ca_cert or ca,
# determined by whichever is more used by the property specs.  This makes it
# convenient to grab the entire tree when a property needs the ca_cert, cert
# and key.  It also matches the cf-deployments use of referring to the ca
# of the matching cert/key by name rather than by knowing what ca was used to
# sign it.
meta:
  certs:
    cf_internal:
      ca:
        cert:  (( vault meta.vault "/cf_internal/certs/ca:certificate" ))

      cc_bridge_cc_uploader:
        ca_cert:     (( grab meta.certs.cf_internal.ca.cert ))
        client_cert: (( vault meta.vault "/cf_internal/certs/cc_bridge_cc_uploader:certificate" ))
        client_key:  (( vault meta.vault "/cf_internal/certs/cc_bridge_cc_uploader:key" ))
      cc_bridge_cc_uploader_server:
        ca_cert:     (( grab meta.certs.cf_internal.ca.cert ))
        server_cert: (( vault meta.vault "/cf_internal/certs/cc_bridge_cc_uploader_server:certificate" ))
        server_key:  (( vault meta.vault "/cf_internal/certs/cc_bridge_cc_uploader_server:key" ))
      cc_bridge_tps:
        ca_cert:     (( grab meta.certs.cf_internal.ca.cert ))
        client_cert: (( vault meta.vault "/cf_internal/certs/cc_bridge_tps:certificate" ))
        client_key:  (( vault meta.vault "/cf_internal/certs/cc_bridge_tps:key" ))
      cc_tls:
        ca_cert:     (( grab meta.certs.cf_internal.ca.cert ))
        public_cert: (( vault meta.vault "/cf_internal/certs/cc_tls:certificate" ))
        private_key: (( vault meta.vault "/cf_internal/certs/cc_tls:key" ))
      cc_public_tls:
        ca_cert:     (( grab meta.certs.cf_internal.ca.cert ))
        certificate: (( vault meta.vault "/cf_internal/certs/cc_public_tls:certificate" ))
        private_key: (( vault meta.vault "/cf_internal/certs/cc_public_tls:key" ))

      diego_auctioneer_server:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_auctioneer_server:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_auctioneer_server:key" ))
      diego_auctioneer_client:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_auctioneer_client:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_auctioneer_client:key" ))

      diego_bbs_server:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_bbs_server:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_bbs_server:key" ))
      diego_bbs_client:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_bbs_client:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_bbs_client:key" ))

      diego_locket_server:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_locket_server:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_locket_server:key" ))
      diego_locket_client:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_locket_client:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_locket_client:key" ))

      diego_rep_agent_v2:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_rep_agent_v2:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_rep_agent_v2:key" ))
      diego_rep_client:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/diego_rep_client:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/diego_rep_client:key" ))

      gorouter_backend_tls:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/gorouter_backend_tls:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/gorouter_backend_tls:key" ))

      logcache_ssl:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/logcache_ssl:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/logcache_ssl:key" ))

      loggregator_rlp_gateway_tls:
        cert:     (( vault meta.vault "/cf_internal/certs/loggregator_rlp_gateway_tls:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/loggregator_rlp_gateway_tls:key" ))
      loggregator_rlp_gateway_tls_cc:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/loggregator_rlp_gateway_tls_cc:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/loggregator_rlp_gateway_tls_cc:key" ))
      loggregator_tls_cc_tc:
        cert:     (( vault meta.vault "/cf_internal/certs/loggregator_tls_cc_tc:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/loggregator_tls_cc_tc:key" ))
      loggregator_trafficcontroller_tls:
        cert:     (( vault meta.vault "/cf_internal/certs/loggregator_trafficcontroller_tls:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/loggregator_trafficcontroller_tls:key" ))

      scheduler_api_tls:
        ca:       (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/scheduler_api_tls:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/scheduler_api_tls:key" ))

      ssh_proxy_backends_tls:
        ca_cert:  (( grab meta.certs.cf_internal.ca.cert ))
        cert:     (( vault meta.vault "/cf_internal/certs/ssh_proxy_backends_tls:certificate" ))
        key:      (( vault meta.vault "/cf_internal/certs/ssh_proxy_backends_tls:key" ))

    diego_instance_identity_ca:
      ca_cert:    (( vault meta.vault "/application/certs/ca:certificate" ))
      cert:       (( vault meta.vault "/diego_instance_identity/certs/ca:certificate" ))
      key:        (( vault meta.vault "/diego_instance_identity/certs/ca:key" ))

    loggregator:
      ca:
        cert:     (( vault meta.vault "/loggregator/certs/ca:certificate" ))
      statsdinjector:
        ca_cert:  (( grab meta.certs.loggregator.ca.cert ))
        cert:     (( vault meta.vault "/loggregator/certs/loggregator_tls_statsdinjector:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/loggregator_tls_statsdinjector:key" ))
      agent: # was metron.server
        ca_cert:  (( grab meta.certs.loggregator.ca.cert ))
        cert:     (( vault meta.vault "/loggregator/certs/loggregator_tls_agent:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/loggregator_tls_agent:key" ))
      doppler:
        cert:     (( vault meta.vault "/loggregator/certs/loggregator_tls_doppler:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/loggregator_tls_doppler:key" ))
      tc:
        cert:     (( vault meta.vault "/loggregator/certs/loggregator_tls_tc:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/loggregator_tls_tc:key" ))
      rlp:
        cert:     (( vault meta.vault "/loggregator/certs/loggregator_tls_rlp:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/loggregator_tls_rlp:key" ))
      rlp_gateway:
        ca_cert:  (( grab meta.certs.loggregator.ca.cert ))
        cert:     (( vault meta.vault "/loggregator/certs/loggregator_tls_rlp_gateway:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/loggregator_tls_rlp_gateway:key" ))
      adapter_rlp_tls:
        cert:     (( vault meta.vault "/loggregator/certs/adapter_rlp_tls:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/adapter_rlp_tls:key" ))
      adapter_tls:
        cert:     (( vault meta.vault "/loggregator/certs/adapter_tls:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/adapter_tls:key" ))
      scheduler_client_tls:
        ca:       (( grab meta.certs.loggregator.ca.cert ))
        cert:     (( vault meta.vault "/loggregator/certs/scheduler_client_tls:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/scheduler_client_tls:key" ))
      logs_provider:
        ca_cert:  (( grab meta.certs.loggregator.ca.cert ))
        cert:     (( vault meta.vault "/loggregator/certs/logs_provider:certificate" ))
        key:      (( vault meta.vault "/loggregator/certs/logs_provider:key" ))

    log_cache:
      ca:
        cert:     (( vault meta.vault "/log_cache/certs/ca:certificate" ))
      server:
        ca_cert:  (( grab meta.certs.log_cache.ca.cert ))
        cert:     (( vault meta.vault "/log_cache/certs/server:certificate" ))
        key:      (( vault meta.vault "/log_cache/certs/server:key" ))
      cc_logcache_tls:
        cert:     (( vault meta.vault "/log_cache/certs/cc_logcache_tls:certificate" ))
        key:      (( vault meta.vault "/log_cache/certs/cc_logcache_tls:key" ))
      proxy_tls:
        cert:     (( vault meta.vault "/log_cache/certs/proxy_tls:certificate" ))
        key:      (( vault meta.vault "/log_cache/certs/proxy_tls:key" ))

    metrics:
      ca:
        cert:     (( vault meta.vault "/metrics/certs/ca:certificate" ))
      forwarder_agent_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/forwarder_agent_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/forwarder_agent_metrics_tls:key" ))
      log_cache_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/log_cache_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/log_cache_metrics_tls:key" ))
      log_cache_cf_auth_proxy_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/log_cache_cf_auth_proxy_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/log_cache_cf_auth_proxy_metrics_tls:key" ))
      log_cache_gateway_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/log_cache_gateway_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/log_cache_gateway_metrics_tls:key" ))
      loggregator_agent_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/loggregator_agent_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/loggregator_agent_metrics_tls:key" ))
      loggr_udp_forwarder_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/loggr_udp_forwarder_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/loggr_udp_forwarder_tls:key" ))
      prom_scraper_scrape_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/prom_scraper_scrape_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/prom_scraper_scrape_tls:key" ))
      prom_scraper_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/prom_scraper_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/prom_scraper_metrics_tls:key" ))
      rlp_gateway_metrics_tls:
        ca_cert:  (( grab meta.certs.metrics.ca.cert ))
        cert:     (( vault meta.vault "/metrics/certs/rlp_gateway_metrics_tls:certificate" ))
        key:      (( vault meta.vault "/metrics/certs/rlp_gateway_metrics_tls:key" ))

    network_policy:
      ca:
        cert:     (( vault meta.vault "/network_policy/certs/ca:certificate" ))
      server:
        ca_cert:  (( grab meta.certs.network_policy.ca.cert ))
        cert:     (( vault meta.vault "/network_policy/certs/server:certificate" ))
        key:      (( vault meta.vault "/network_policy/certs/server:key" ))
      client:
        ca_cert:  (( grab meta.certs.network_policy.ca.cert ))
        cert:     (( vault meta.vault "/network_policy/certs/client:certificate" ))
        key:      (( vault meta.vault "/network_policy/certs/client:key" ))
      external:
        ca_cert:  (( grab meta.certs.network_policy.ca.cert ))
        cert:     (( vault meta.vault "/network_policy/certs/server_external:certificate" ))
        key:      (( vault meta.vault "/network_policy/certs/server_external:key" ))

    router:
      ca:
        cert:     (( vault meta.vault "/router/certs/ca:certificate" ))
      ssl:
        cert:     (( vault meta.vault "/router/certs/ssl:certificate" ))
        key:      (( vault meta.vault "/router/certs/ssl:key" ))

    silk:
      ca:
        cert:     (( vault meta.vault "/silk/certs/ca:certificate" ))
      controller:
        ca_cert:  (( grab meta.certs.silk.ca.cert ))
        cert:     (( vault meta.vault "/silk/certs/controller:certificate" ))
        key:      (( vault meta.vault "/silk/certs/controller:key" ))
      daemon:
        ca_cert:  (( grab meta.certs.silk.ca.cert ))
        cert:     (( vault meta.vault "/silk/certs/daemon:certificate" ))
        key:      (( vault meta.vault "/silk/certs/daemon:key" ))

    uaa:
      ca:
        cert:     (( vault meta.vault "/uaa/certs/ca:certificate" ))
      login_saml:
        ca_cert:  (( grab meta.certs.uaa.ca.cert ))
        cert:     (( vault meta.vault "/uaa/certs/login_saml:certificate" ))
        key:      (( vault meta.vault "/uaa/certs/login_saml:key" ))
      ssl:
        ca_cert:  (( grab meta.certs.uaa.ca.cert ))
        cert:     (( vault meta.vault "/uaa/certs/ssl:certificate" ))
        key:      (( vault meta.vault "/uaa/certs/ssl:key" ))
