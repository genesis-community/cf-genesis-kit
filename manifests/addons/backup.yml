releases:
- name: app-autoscaler
  version: latest
- name: postgres
  url: https://bosh.io/d/github.com/cloudfoundry/postgres-release?v=17
  version: '17'
  sha1: b062e32a5409ccd4e4161337c48705c793a58412
- name: consul
  version: latest
- name: routing
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/cf-routing-release?v=0.162.0
  sha1: f17cf09d2414f5f486d18bbd57b17fd48fb69773
  version: '0.162.0'

instance_groups:
  # Postgres Instance Group
- name: postgres_autoscaler
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  update:
    serial: true
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            postgres:
              check:
                tcp: 127.0.0.1:5432
                interval: 30s
                timeout: 10s
  - name: postgres
    release: postgres
    properties:
      databases: &database
        databases:
        - name: autoscaler
          tag: default
        db_scheme: postgres
        port: 5432
        roles:
        - name: postgres
          password: "((database_password))"
          tag: default
        connection_config: &databaseConnectionConfig
          max_open_connections: 100
          max_idle_connections: 10
          connection_max_lifetime: 60s

# APIServer Instance Group
- name: apiserver
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            apiserver: {}
  - name: apiserver
    release: app-autoscaler
    properties:
      autoscaler:
        api_server:
          db_config: &db_config
            idle_timeout: 1000
            max_connections: 10
            min_connections: 0
          port: 6100
          publicPort: &apiServerPublicPort 6106
          ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
          server_cert: (( vault meta.vault "/autoscaler/apiserver/certs/server:certificate" ))
          server_key:  (( vault meta.vault "/autoscaler/apiserver/certs/server:key" ))
          public_ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
          public_server_cert: (( vault meta.vault "/autoscaler/apiserver/certs/public:certificate" ))
          public_server_key:  (( vault meta.vault "/autoscaler/apiserver/certs/public:key" ))
          scheduler:
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/scheduler/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/scheduler/certs/client:key" ))
          scaling_engine:
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/scaling_engine/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/scaling_engine/certs/client:key" ))
          metrics_collector:
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/metrics_collector/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/metrics_collector/certs/client:key" ))
          service_broker:
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/service_broker/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/service_broker/certs/client:key" ))
        policy_db: *database
        cf:
          api: (( concat "https://" meta.api_hostname ))
          skip_ssl_validation: (( grab params.skip_ssl_validation ))
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats}
    properties:
      route_registrar:
        routes:
        - name: api_server_public_api
          registration_interval: 20s
          port: *apiServerPublicPort
          tags:
            component: api_server
          uris:
            - autoscaler.((system_domain))
      
# Scheduler Instance Group
- name: scheduler_autoscaler
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: large
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            autoscalerscheduler: 
              check:
                tcp: 127.0.0.1:6102
                interval: 30s
                timeout: 10s
  - name: scheduler
    release: app-autoscaler
    properties:
      autoscaler:
        scheduler:
          port: 6102
          job_reschedule_interval_millisecond: 10000
          job_reschedule_maxcount: 6
          notification_reschedule_maxcount: 3
          ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
          server_cert: (( vault meta.vault "/autoscaler/scheduler/certs/server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/scheduler/certs/server:key" ))
          scaling_engine:
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/scaling_engine/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/scaling_engine/certs/client:key" ))
        scheduler_db: *database
        policy_db: *database
      
# Service-Broker Instance Group
- name: servicebroker
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            servicebroker: {}
  - name: servicebroker
    release: app-autoscaler
    properties:
      autoscaler:
        service_broker: 
          db_config: *db_config
          publicPort : &servicebrokerPort 6101
          port: 6107
          ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
          server_cert: (( vault meta.vault "/autoscaler/service_broker/certs/server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/service_broker/certs/server:key" ))
          public_ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
          public_server_cert: (( vault meta.vault "/autoscaler/service_broker/certs/public:certificate" ))
          public_server_key: (( vault meta.vault "/autoscaler/service_broker/certs/public:key" ))
          username: username
          password: password
          http_request_timeout: 5000
          dashboard_redirect_uri: ""
          catalog: 
            services:
            - id: autoscaler-guid
              name: autoscaler
              description: Automatically increase or decrease the number of application instances based on a policy you define.
              bindable: true
              plans:
              - id: autoscaler-free-plan-id
                name: autoscaler-free-plan
                description: This is the free service plan for the Auto-Scaling service.
          api_server:
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/apiserver/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/apiserver/certs/client:key" ))
        binding_db: *database
  - name: route_registrar
    release: routing
    consumes:
      nats: {from: nats}
    properties:
      route_registrar:
        routes:
        - name: autoscaler_service_broker
          registration_interval: 20s
          port: *servicebrokerPort
          tags:
            component: autoscaler_service_broker
          uris:
            - (( concat "autoscalerservicebroker." params.system_domain ))
# Pruner Instance Group
- name: pruner
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            pruner: 
              check: {}
  - name: pruner
    release: app-autoscaler
    properties:
      autoscaler:
        appmetrics_db: *database
        instancemetrics_db: *database
        scalingengine_db: *database
        appmetrics_db_connection_config: *databaseConnectionConfig
        instancemetrics_db_connection_config: *databaseConnectionConfig
        scalingengine_db_connection_config: *databaseConnectionConfig
        lock_db: *database
        pruner:
          db_lock: 
            ttl: 15s
            retry_interval: 5s
          enable_db_lock: false
          logging:
            level: debug 

# Metric-collector Instance Group
- name: metricscollector
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            metricscollector:
              check:
                tcp: 127.0.0.1:6103
                interval: 30s
                timeout: 10s
  - name: metricscollector
    release: app-autoscaler
    properties:
      autoscaler:
        instancemetrics_db: *database
        policy_db: *database
        lock_db: *database
        instancemetrics_db_connection_config: *databaseConnectionConfig
        policy_db_connection_config: *databaseConnectionConfig
        lock_db_connection_config: *databaseConnectionConfig
        cf: &cf_credentials
          api: (( concat "https://" meta.api_hostname ))
          grant_type: password
          username: admin
          password: (( vault meta.vault "/admin_user:password" ))
          client_id: ""
          secret: ""
          skip_ssl_validation: (( grab params.skip_ssl_validation ))
        metricscollector:
          logging:
            level: debug
          server:
            port: &metricsCollectorPort 6103
          collector:
            refresh_interval: 60s
            collect_interval: 30s
            save_interval: 5s
          enable_db_lock: false
          ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
          server_cert: (( vault meta.vault "/autoscaler/metrics_collector/certs/server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/metrics_collector/certs/server:key" ))

# Event-Generator Instance Group
- name: eventgenerator
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            eventgenerator: 
              check: {}
  - name: eventgenerator
    release: app-autoscaler
    properties:
      autoscaler:
        appmetrics_db: *database
        policy_db: *database
        lock_db: *database
        appmetrics_db_connection_config: *databaseConnectionConfig
        policy_db_connection_config: *databaseConnectionConfig
        lock_db_connection_config: *databaseConnectionConfig
        eventgenerator:
          logging:
            level: debug
          aggregator:
            aggregator_execute_interval: 40s
            policy_poller_interval: 40s
            metric_poller_count: 20
            app_monitor_channel_size: 200
            save_interval: 5s
            app_metric_channel_size: 1000
          evaluator:
            evaluation_manager_execute_interval: 40s
            evaluator_count: 20
            trigger_array_channel_size: 200
          defaultStatWindowSecs: 300
          defaultBreachDurationSecs: 300
          circuitBreaker:
            back_off_initial_interval: 5m
            back_off_max_interval: 120m
            consecutive_failure_count: 5
          enable_db_lock: false
          scaling_engine:
            host: scalingengine.service.cf.internal
            port: *scalingEnginePort
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/scaling_engine/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/scaling_engine/certs/client:key" ))
          metricscollector:
            host: metricscollector.service.cf.internal
            port: *metricsCollectorPort
            ca_cert: (( vault meta.vault "/autoscaler/ca:ca" ))
            client_cert: (( vault meta.vault "/autoscaler/metrics_collector/certs/client:certificate" ))
            client_key: (( vault meta.vault "/autoscaler/metrics_collector/certs/client:key" ))

# Scaling-Engine Instance Group
- name: scalingengine
  azs: (( grab params.availability_zones || meta.default.azs ))
  instances: (( grab params.autoscaler_instances || 1 ))
  networks:
  - name: (( grab params.cf_autoscaler_network || cf-autoscaler )) 
  stemcell: default
  vm_type: (( grab params.autoscaler_vm_type || small ))
  jobs:
  - name: consul_agent
    release: consul
    consumes:
      consul_common: {from: consul_common_link}
      consul_server: nil
      consul_client: {from: consul_client_link}
    properties:
      consul:
        agent:
          services:
            scalingengine: 
              check:
                tcp: 127.0.0.1:6104
                interval: 30s
                timeout: 10s
  - name: scalingengine
    release: app-autoscaler
    properties:
      autoscaler:
        scalingengine_db: *database
        scheduler_db: *database
        policy_db: *database
        lock_db: *database
        scalingengine_db_connection_config: *databaseConnectionConfig
        scheduler_db_connection_config: *databaseConnectionConfig
        policy_db_connection_config: *databaseConnectionConfig
        lock_db_connection_config: *databaseConnectionConfig
        cf: *cf_credentials
        scalingengine:
          logging:
            level: debug
          server:
            port: &scalingEnginePort 6104
          defaultCoolDownSecs: 300
          lockSize: 32
          ca_cert:  (( vault meta.vault "/autoscaler/ca:ca" ))
          server_cert: (( vault meta.vault "/autoscaler/scaling_engine/certs/server:certificate" ))
          server_key: (( vault meta.vault "/autoscaler/scaling_engine/certs/server:certificate" ))
          db_lock:
            ttl: 15s
            retry_interval: 5s
          enable_db_lock: true


variables:
- name: database_password
  type: password