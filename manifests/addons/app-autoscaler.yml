params:
  autoscaler_api_vm_type:       as-api
  autoscaler_broker_vm_type:    as-broker
  autoscaler_scheduler_vm_type: as-scheduler
  autoscaler_collector_vm_type: as-collector
  autoscaler_scaler_vm_type:    as-scaler
  autoscaler_engine_vm_type:    as-engine
  autoscaler_operator_vm_type:  as-operator

meta:
  autoscaler:
    broker_url_default: (( concat "autoscalerservicebroker." params.system_domain ))
    broker_url:         (( grab params.autoscaler_broker_url || meta.autoscaler.broker_url_default ))

    cf_credentials:
      api:                 (( concat "https://" meta.api_hostname ))
      skip_ssl_validation: (( grab params.skip_ssl_validation ))

      username: admin
      password: (( vault meta.vault "/admin_user:password" ))

      client_id:  app_autoscaler
      secret:     (( vault meta.vault "/uaa/client_secrets:app_autoscaler" ))
      grant_type: password

    db:
      connection_config: (( grab meta.autoscaler.db_connection_config ))
      address:           (( grab params.autoscalerdb_host || params.external_db_host ))
      db_scheme:         postgres
      port:              (( grab params.autoscalerdb_port || params.external_db_port ))

      databases:
        - name: autoscaler
          tag:  default
      roles:
        - name:     (( grab params.autoscalerdb_user || params.external_db_username ))
          password: (( grab params.autoscalerdb_password || params.external_db_password ))
          tag:      default

    db_connection_config:
      max_open_connections: 100
      max_idle_connections: 10
      connection_max_lifetime: 60s

    db_config:
      idle_timeout:  1000
      min_connections:  0
      max_connections: 10

    example_plan:
      - id:          autoscaler-example-plan-id
        name:        autoscaler-example-plan
        description: This is the example service plan for the Auto-Scaling service.

exodus:
  autoscaler_enabled:                true
  autoscaler_servicebroker_url:      (( grab params.autoscaler_broker_url || meta.autoscaler.broker_url ))
  autoscaler_servicebroker_username: (( vault meta.vault "/autoscaler/servicebroker_account:username" ))
  autoscaler_servicebroker_password: (( vault meta.vault "/autoscaler/servicebroker_account:password" ))

releases:
  - name:    app-autoscaler
    version: "2.0.0"
    url:     (( concat "https://bosh.io/d/github.com/cloudfoundry-incubator/app-autoscaler-release?v=" releases.app-autoscaler.version ))
    sha1:    b2bda4bd9ff9b902fa6a6f3d37c13b681b3402b0

instance_groups:
  - name: as-api
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_api_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_api_vm_type ))
    jobs:
      - name: apiserver
        release: app-autoscaler
        properties:
          autoscaler:
            policy_db: (( grab meta.autoscaler.db ))

            cf:
              api:                 (( grab meta.autoscaler.cf_credentials.api ))
              skip_ssl_validation: (( grab meta.autoscaler.cf_credentials.skip_ssl_validation ))
              client_id:           (( grab meta.autoscaler.cf_credentials.client_id ))
              secret:              (( grab meta.autoscaler.cf_credentials.secret ))
              grant_type:          client_credentials

            api_server:
              require_consul:           false
              service_offering_enabled: true

              cache_ttl:           600
              http_client_timeout: 60000

              db_config: (( grab meta.autoscaler.db_config ))

              port:       6100
              publicPort: 6106
              health:
                port: 6200

              ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/apiserver_server:certificate" ))
              server_key:  (( vault meta.vault "/autoscaler/certs/apiserver_server:key" ))

              public_ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              public_server_cert: (( vault meta.vault "/autoscaler/certs/apiserver_public:certificate" ))
              public_server_key:  (( vault meta.vault "/autoscaler/certs/apiserver_public:key" ))

              scheduler:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scheduler_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scheduler_client:key" ))

              scaling_engine:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))

              metrics_collector:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/metricscollector_client:key" ))

              eventgenerator:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/eventgenerator_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/eventgenerator_client:key" ))

              service_broker:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/servicebroker_client:key" ))

      - name: route_registrar
        release: routing
        consumes:
          nats: {from: nats}
        properties:
          route_registrar:
            routes:
              - name: api_server_public_api
                registration_interval: 20s
                port: (( grab instance_groups.as-api.jobs.apiserver.properties.autoscaler.api_server.publicPort ))
                tags:
                  component: api_server
                uris:
                  - (( concat "autoscaler." params.system_domain ))

  - name: as-scheduler
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_scheduler_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_scheduler_vm_type ))

    jobs:
      - name: scheduler
        release: app-autoscaler
        properties:
          autoscaler:
            scheduler_db: (( grab meta.autoscaler.db ))
            policy_db:    (( grab meta.autoscaler.db ))

            scheduler:
              require_consul: false

              job_reschedule_interval_millisecond: 10000
              job_reschedule_maxcount:             6
              notification_reschedule_maxcount:    3

              port: 6102
              health:
                port: 6202

              ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/scheduler_server:certificate" ))
              server_key:  (( vault meta.vault "/autoscaler/certs/scheduler_server:key" ))

              scaling_engine:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))

  - name: as-broker
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_broker_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_broker_vm_type ))
    jobs:
      - name: servicebroker
        release: app-autoscaler
        properties:
          autoscaler:
            binding_db: (( grab meta.autoscaler.db ))
            service_broker:
              db_config: (( grab meta.autoscaler.db_config ))

              publicPort: (( grab params.autoscaler_servicebroker_port || 6101 ))
              port: 6107
              health:
                port: 6201

              ca_cert:            (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert:        (( vault meta.vault "/autoscaler/certs/servicebroker_server:certificate" ))
              server_key:         (( vault meta.vault "/autoscaler/certs/servicebroker_server:key" ))

              public_ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              public_server_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_public:certificate" ))
              public_server_key:  (( vault meta.vault "/autoscaler/certs/servicebroker_public:key" ))

              username: (( vault meta.vault "/autoscaler/servicebroker_account:username"))
              password: (( vault meta.vault "/autoscaler/servicebroker_account:password"))

              http_request_timeout: 5000
              require_consul: false
              dashboard_redirect_uri: ""

              api_server:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/apiserver_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/apiserver_client:key" ))

              catalog:
                services:
                  - id: autoscaler-guid
                    name: autoscaler
                    description: Automatically increase or decrease the number of application instances based on a policy you define.
                    bindable: true
                    plans: (( grab params.autscaler_plans || meta.autoscaler.example_plan ))

      - name: route_registrar
        release: routing
        consumes:
          nats: {from: nats}
        properties:
          route_registrar:
            routes:
              - name: autoscaler_service_broker
                registration_interval: 20s
                port: (( grab instance_groups.as-broker.jobs.servicebroker.properties.autoscaler.service_broker.publicPort ))
                tags:
                  component: autoscaler_service_broker
                uris:
                  - (( grab meta.autoscaler.broker_url ))

  - name: as-collector
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_collector_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_collector_vm_type ))
    jobs:
      - name: metricscollector
        release: app-autoscaler
        properties:
          autoscaler:
            require_consul: false

            instancemetrics_db: (( grab meta.autoscaler.db ))
            policy_db:          (( grab meta.autoscaler.db ))
            lock_db:            (( grab meta.autoscaler.db ))

            instancemetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            policy_db_connection_config:          (( grab meta.autoscaler.db_connection_config ))
            lock_db_connection_config:            (( grab meta.autoscaler.db_connection_config ))

            cf: (( grab meta.autoscaler.cf_credentials ))

            metricscollector:
              enable_db_lock: false

              ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_server:certificate" ))
              server_key:  (( vault meta.vault "/autoscaler/certs/metricscollector_server:key" ))

              logging:
                level: debug

              server:
                port: 6103
              health:
                port: 6203

              collector:
                refresh_interval: 60s
                collect_interval: 30s
                save_interval: 5s

  - name: as-scaler
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_scaler_instances || 1 ))
    networks:
    - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_scaler_vm_type ))
    jobs:
      - name: eventgenerator
        release: app-autoscaler
        properties:
          autoscaler:
            require_consul: false

            appmetrics_db: (( grab meta.autoscaler.db ))
            policy_db:     (( grab meta.autoscaler.db ))
            lock_db:       (( grab meta.autoscaler.db ))

            appmetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            policy_db_connection_config:     (( grab meta.autoscaler.db_connection_config ))
            lock_db_connection_config:       (( grab meta.autoscaler.db_connection_config ))

            eventgenerator:
              enable_db_lock: false

              ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/eventgenerator_server:certificate" ))
              server_key:  (( vault meta.vault "/autoscaler/certs/eventgenerator_server:key" ))

              logging:
                level: debug

              server:
                port: 6105
              health:
                port: 6205

              defaultStatWindowSecs:     300
              defaultBreachDurationSecs: 300

              aggregator:
                metric_poller_count: 20

                aggregator_execute_interval: 40s
                policy_poller_interval:      40s
                save_interval:                5s

                app_monitor_channel_size:  200
                app_metric_channel_size:  1000

              evaluator:
                evaluator_count: 20

                evaluation_manager_execute_interval: 40s

                trigger_array_channel_size: 200

              circuitBreaker:
                consecutive_failure_count: 5

                back_off_initial_interval:   5m
                back_off_max_interval:     120m

              scaling_engine:
                host: scalingengine.service.cf.internal
                port: (( grab instance_groups.as-engine.jobs.scalingengine.properties.autoscaler.scalingengine.server.port ))

                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))

              metricscollector:
                host: metricscollector.service.cf.internal
                port: (( grab instance_groups.as-collector.jobs.metricscollector.properties.autoscaler.metricscollector.server.port ))

                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/metricscollector_client:key" ))

  - name: as-engine
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_engine_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_engine_vm_type ))
    jobs:
      - name: scalingengine
        release: app-autoscaler
        properties:
          autoscaler:
            require_consul: false

            scalingengine_db: (( grab meta.autoscaler.db ))
            scheduler_db:     (( grab meta.autoscaler.db ))
            policy_db:        (( grab meta.autoscaler.db ))
            lock_db:          (( grab meta.autoscaler.db ))

            scalingengine_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            scheduler_db_connection_config:     (( grab meta.autoscaler.db_connection_config ))
            policy_db_connection_config:        (( grab meta.autoscaler.db_connection_config ))
            lock_db_connection_config:          (( grab meta.autoscaler.db_connection_config ))

            cf: (( grab meta.autoscaler.cf_credentials ))

            scalingengine:
              defaultCoolDownSecs: 300
              lockSize: 32

              enable_db_lock: true
              db_lock:
                ttl: 15s
                retry_interval: 5s

              ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_server:certificate" ))
              server_key:  (( vault meta.vault "/autoscaler/certs/scalingengine_server:key" ))

              logging:
                level: debug

              server:
                port: 6104
              health:
                port: 6204

  - name: as-operator
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_engine_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_operator_vm_type ))
    jobs:
      - name: operator
        release: app-autoscaler
        properties:
          autoscaler:
            require_consul: false

            policy_db:          (( grab meta.autoscaler.db ))
            appmetrics_db:      (( grab meta.autoscaler.db ))
            instancemetrics_db: (( grab meta.autoscaler.db ))
            scalingengine_db:   (( grab meta.autoscaler.db ))
            lock_db:            (( grab meta.autoscaler.db ))

            policy_db_connection_config:          (( grab meta.autoscaler.db_connection_config ))
            appmetrics_db_connection_config:      (( grab meta.autoscaler.db_connection_config ))
            instancemetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            scalingengine_db_connection_config:   (( grab meta.autoscaler.db_connection_config ))

            cf: (( grab meta.autoscaler.cf_credentials ))

            operator:
              http_client_timeout: 60s
              app_sync_interval: 24h

              enable_db_lock: false
              db_lock:
                ttl: 15s
                retry_interval: 5s

              logging:
                level: debug

              health:
                port: 6208

              scaling_engine:
                port: (( grab instance_groups.as-engine.jobs.scalingengine.properties.autoscaler.scalingengine.server.port ))

                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))

              scheduler:
                port: (( grab instance_groups.as-scheduler.jobs.scheduler.properties.autoscaler.scheduler.port ))

                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scheduler_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scheduler_client:key" ))
