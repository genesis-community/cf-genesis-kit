meta:
  autoscaler:
    broker_url_default: (( concat "autoscalerservicebroker." params.system_domain ))
    broker_url:         (( grab params.autoscaler_broker_url || meta.autoscaler.broker_url_default ))

    servicebroker_port:            (( grab params.autoscaler_servicebroker_port || 6101 ))
    scheduler_port:                6102
    metrics_collector_port:        6103
    scaling_engine_port:           6104
    event_generator_port:          6105
    api_server_public_port:        6106

    scheduler_health_port:         6202
    metrics_collector_health_port: 6203
    scaling_engine_health_port:    6204
    event_generator_health_port:   6205
    operator_health_port:          6208

    autoscaler_api_vm_type:       as-api
    autoscaler_broker_vm_type:    as-broker
    autoscaler_scheduler_vm_type: as-scheduler
    autoscaler_collector_vm_type: as-collector
    autoscaler_scaler_vm_type:    as-scaler
    autoscaler_engine_vm_type:    as-engine
    autoscaler_operator_vm_type:  as-operator

    cf_credentials:
      api: (( concat "https://" meta.api_hostname ))
      grant_type: password
      username: admin
      password: (( vault meta.vault "/admin_user:password" ))
      client_id: app_autoscaler
      secret: (( vault meta.vault "/uaa/client_secrets:app_autoscaler" ))
      skip_ssl_validation: (( grab params.skip_ssl_validation ))

    db:
      connection_config: (( grab meta.autoscaler.db_connection_config ))
      address:   (( grab params.autoscalerdb_host || params.external_db_host ))
      db_scheme: postgres
      port:      (( grab params.autoscalerdb_port || params.external_db_port ))

      databases:
        - name: autoscaler
          tag: default
      roles:
        - name: (( grab params.autoscalerdb_user || params.external_db_username ))
          password: (( grab params.autoscalerdb_password || params.external_db_password ))
          tag: default

    db_connection_config:
      max_open_connections: 100
      max_idle_connections: 10
      connection_max_lifetime: 60s

    db_config:
      idle_timeout: 1000
      max_connections: 10
      min_connections: 0

    example_plan:
      - id: autoscaler-example-plan-id
        name: autoscaler-example-plan
        description: This is the example service plan for the Auto-Scaling service.

releases:
  - name:    "app-autoscaler"
    version: "2.0.0"
    url:     (( concat "https://bosh.io/d/github.com/cloudfoundry-incubator/app-autoscaler-release?v=" releases.app-autoscaler.version ))
    sha1:    "b2bda4bd9ff9b902fa6a6f3d37c13b681b3402b0"

exodus:
  autoscaler_enabled: true
  autoscaler_servicebroker_url: (( grab params.autoscaler_broker_url || meta.autoscaler.broker_url ))
  autoscaler_servicebroker_username: (( vault meta.vault "/autoscaler/servicebroker_account:username" ))
  autoscaler_servicebroker_password: (( vault meta.vault "/autoscaler/servicebroker_account:password" ))

instance_groups:
  - name: as-api
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_api_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_api_vm_type ))
    jobs:
      - name: apiserver
        release: app-autoscaler
        properties:
          autoscaler:
            api_server:
              require_consul:           false
              service_offering_enabled: true

              cache_ttl:           600
              http_client_timeout: 60000

              db_config: (( grab meta.autoscaler.db_config ))

              port:       6100
              publicPort: (( grab meta.autoscaler.api_server_public_port ))
              health:
                port: 6200

              ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/apiserver_server:certificate" ))
              server_key:  (( vault meta.vault "/autoscaler/certs/apiserver_server:key" ))

              public_ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              public_server_cert: (( vault meta.vault "/autoscaler/certs/apiserver_public:certificate" ))
              public_server_key:  (( vault meta.vault "/autoscaler/certs/apiserver_public:key" ))

              scheduler:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scheduler_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scheduler_client:key" ))

              scaling_engine:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))

              metrics_collector:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/metricscollector_client:key" ))

              eventgenerator:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/eventgenerator_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/eventgenerator_client:key" ))

              service_broker:
                ca_cert:     (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_client:certificate" ))
                client_key:  (( vault meta.vault "/autoscaler/certs/servicebroker_client:key" ))

            policy_db: (( grab meta.autoscaler.db ))
            cf:
              api: (( concat "https://" meta.api_hostname ))
              skip_ssl_validation: (( grab params.skip_ssl_validation ))
              grant_type: client_credentials
              client_id: app_autoscaler
              secret: (( vault meta.vault "/uaa/client_secrets:app_autoscaler" ))

      - name: route_registrar
        release: routing
        consumes:
          nats: {from: nats}
        properties:
          route_registrar:
            routes:
              - name: api_server_public_api
                registration_interval: 20s
                port: (( grab meta.autoscaler.api_server_public_port ))
                tags:
                  component: api_server
                uris:
                  - (( concat "autoscaler." params.system_domain ))

  - name: as-scheduler
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_scheduler_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_scheduler_vm_type ))

    jobs:
      - name: scheduler
        release: app-autoscaler
        properties:
          autoscaler:
            scheduler:
              port: (( grab meta.autoscaler.scheduler_port ))
              health:
                port: (( grab meta.autoscaler.scheduler_health_port ))
              job_reschedule_interval_millisecond: 10000
              job_reschedule_maxcount: 6
              notification_reschedule_maxcount: 3
              ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              require_consul: false
              server_cert: (( vault meta.vault "/autoscaler/certs/scheduler_server:certificate" ))
              server_key: (( vault meta.vault "/autoscaler/certs/scheduler_server:key" ))
              scaling_engine:
                ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))
            scheduler_db: (( grab meta.autoscaler.db ))
            policy_db: (( grab meta.autoscaler.db ))

  - name: as-broker
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_broker_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_broker_vm_type ))
    jobs:
      - name: servicebroker
        release: app-autoscaler
        properties:
          autoscaler:
            service_broker:
              db_config: (( grab meta.autoscaler.db_config ))
              publicPort: (( grab meta.autoscaler.servicebroker_port ))
              port: 6107
              health:
                port: 6201
              ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_server:certificate" ))
              server_key: (( vault meta.vault "/autoscaler/certs/servicebroker_server:key" ))
              public_ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              public_server_cert: (( vault meta.vault "/autoscaler/certs/servicebroker_public:certificate" ))
              public_server_key: (( vault meta.vault "/autoscaler/certs/servicebroker_public:key" ))
              username: (( vault meta.vault "/autoscaler/servicebroker_account:username"))
              password: (( vault meta.vault "/autoscaler/servicebroker_account:password"))
              http_request_timeout: 5000
              require_consul: false
              dashboard_redirect_uri: ""
              catalog:
                services:
                - id: autoscaler-guid
                  name: autoscaler
                  description: Automatically increase or decrease the number of application instances based on a policy you define.
                  bindable: true
                  plans: (( grab params.autscaler_plans || meta.autoscaler.example_plan ))
              api_server:
                ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/apiserver_client:certificate" ))
                client_key: (( vault meta.vault "/autoscaler/certs/apiserver_client:key" ))
            binding_db: (( grab meta.autoscaler.db ))
      - name: route_registrar
        release: routing
        consumes:
          nats: {from: nats}
        properties:
          route_registrar:
            routes:
            - name: autoscaler_service_broker
              registration_interval: 20s
              port: (( grab meta.autoscaler.servicebroker_port ))
              tags:
                component: autoscaler_service_broker
              uris:
                - (( grab meta.autoscaler.broker_url ))

  - name: as-collector
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_collector_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_collector_vm_type ))
    jobs:
      - name: metricscollector
        release: app-autoscaler
        properties:
          autoscaler:
            instancemetrics_db: (( grab meta.autoscaler.db ))
            policy_db: (( grab meta.autoscaler.db ))
            lock_db: (( grab meta.autoscaler.db ))
            instancemetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            policy_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            lock_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            require_consul: false
            cf: (( grab meta.autoscaler.cf_credentials ))
            metricscollector:
              logging:
                level: debug
              server:
                port: (( grab meta.autoscaler.metrics_collector_port ))
              health:
                port: (( grab meta.autoscaler.metrics_collector_health_port ))
              collector:
                refresh_interval: 60s
                collect_interval: 30s
                save_interval: 5s
              enable_db_lock: false
              ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_server:certificate" ))
              server_key: (( vault meta.vault "/autoscaler/certs/metricscollector_server:key" ))

  - name: as-scaler
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_scaler_instances || 1 ))
    networks:
    - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_scaler_vm_type ))
    jobs:
      - name: eventgenerator
        release: app-autoscaler
        properties:
          autoscaler:
            appmetrics_db: (( grab meta.autoscaler.db ))
            policy_db: (( grab meta.autoscaler.db ))
            lock_db: (( grab meta.autoscaler.db ))
            appmetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            policy_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            lock_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            require_consul: false
            eventgenerator:
              logging:
                level: debug
              server:
                port: (( grab meta.autoscaler.event_generator_port ))
              health:
                port: (( grab meta.autoscaler.event_generator_health_port ))
              ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/eventgenerator_server:certificate" ))
              server_key: (( vault meta.vault "/autoscaler/certs/eventgenerator_server:key" ))
              aggregator:
                aggregator_execute_interval: 40s
                policy_poller_interval: 40s
                metric_poller_count: 20
                app_monitor_channel_size: 200
                save_interval: 5s
                app_metric_channel_size: 1000
              evaluator:
                evaluation_manager_execute_interval: 40s
                evaluator_count: 20
                trigger_array_channel_size: 200
              defaultStatWindowSecs: 300
              defaultBreachDurationSecs: 300
              circuitBreaker:
                back_off_initial_interval: 5m
                back_off_max_interval: 120m
                consecutive_failure_count: 5
              enable_db_lock: false
              scaling_engine:
                host: scalingengine.service.cf.internal
                port: (( grab meta.autoscaler.scaling_engine_port ))
                ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))
              metricscollector:
                host: metricscollector.service.cf.internal
                port: (( grab meta.autoscaler.metrics_collector_port ))
                ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/metricscollector_client:certificate" ))
                client_key: (( vault meta.vault "/autoscaler/certs/metricscollector_client:key" ))

  - name: as-engine
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_engine_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_engine_vm_type ))
    jobs:
      - name: scalingengine
        release: app-autoscaler
        properties:
          autoscaler:
            scalingengine_db: (( grab meta.autoscaler.db ))
            scheduler_db: (( grab meta.autoscaler.db ))
            policy_db: (( grab meta.autoscaler.db ))
            lock_db: (( grab meta.autoscaler.db ))
            scalingengine_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            scheduler_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            policy_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            lock_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            require_consul: false
            cf: (( grab meta.autoscaler.cf_credentials ))
            scalingengine:
              logging:
                level: debug
              server:
                port: (( grab meta.autoscaler.scaling_engine_port ))
              health:
                port: (( grab meta.autoscaler.scaling_engine_health_port ))
              defaultCoolDownSecs: 300
              lockSize: 32
              ca_cert:  (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
              server_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_server:certificate" ))
              server_key: (( vault meta.vault "/autoscaler/certs/scalingengine_server:key" ))
              db_lock:
                ttl: 15s
                retry_interval: 5s
              enable_db_lock: true

  - name: as-operator
    azs: (( grab params.availability_zones || meta.default.azs ))
    instances: (( grab params.autoscaler_engine_instances || 1 ))
    networks:
      - name: (( grab params.autoscaler_network || "cf-autoscaler"  ))
    stemcell: default
    vm_type: (( grab params.autoscaler_operator_vm_type ))
    jobs:
      - name: operator
        release: app-autoscaler
        properties:
          autoscaler:
            cf: (( grab meta.autoscaler.cf_credentials ))
            policy_db: (( grab meta.autoscaler.db ))
            appmetrics_db: (( grab meta.autoscaler.db ))
            instancemetrics_db: (( grab meta.autoscaler.db ))
            scalingengine_db: (( grab meta.autoscaler.db ))
            policy_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            appmetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            instancemetrics_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            scalingengine_db_connection_config: (( grab meta.autoscaler.db_connection_config ))
            lock_db: (( grab meta.autoscaler.db ))
            require_consul: false
            operator:
              http_client_timeout: 60s
              app_sync_interval: 24h
              scaling_engine:
                port: (( grab meta.autoscaler.scaling_engine_port ))
                ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scalingengine_client:certificate" ))
                client_key: (( vault meta.vault "/autoscaler/certs/scalingengine_client:key" ))
              scheduler:
                port: (( grab meta.autoscaler.scheduler_port ))
                ca_cert: (( vault meta.vault "/autoscaler/certs/ca:certificate" ))
                client_cert: (( vault meta.vault "/autoscaler/certs/scheduler_client:certificate" ))
                client_key: (( vault meta.vault "/autoscaler/certs/scheduler_client:key" ))
              db_lock:
                ttl: 15s
                retry_interval: 5s
              enable_db_lock: false
              logging:
                level: debug
              health:
                port: (( grab meta.autoscaler.operator_health_port ))
