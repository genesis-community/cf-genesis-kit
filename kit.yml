---
name:    Cloud Foundry
version: 1.8.0
authors: [ James Hunt <jhunt@starkandwayne.com>,
           Dennis Bell <dbell@starkandwayne.com> ]
docs:    https://github.com/genesis-community/cf-genesis-kit
code:    https://github.com/genesis-community/cf-genesis-kit

description: |
  This kit will deploy OSS Cloud Foundry to BOSH. It contains
  subkits to help identify where your databases and blobstore are,
  customizations for Azure environments, and to enable an appropriate
  HA Proxy configuration if desired. It is loosely based off of the
  [cf-deployment](https://github.com/cloudfoundry/cf-deployment) repo.

certificates:
  base:
    application/certs:
      ca:
        valid_for: 1y
        names:     [ "appRootCA" ]

    diego_instance_identity/certs:
      ca:
        valid_for: 1y
        names:     [ "instanceIdentityCA" ]
        signed_by: "base.application/certs.ca"
        # This is suppose to be signed by application/certs/ca, but that is not
        # supported at this time. Instead, it is done as a in-situ update handled
        # by the blueprint hook if it detects that it is incorrectly signed.

    cf_internal/certs:
      ca:  # this is known as 'service_cf_internal_ca' in cf-deployment
        valid_for: 1y
        names:     [ "internalCA" ]

      # This was under separate features blobstore-webdav.blobstore.certs.server
      # and  local-blobstore.blobstore.certs.server, but is suppose to be signed
      # by the cf_internal cert, so had to be moved here
      blobstore_tls:
        valid_for: 1y
        names:     [ "blobstore.service.cf.internal" ]

      cc_bridge_cc_uploader:
        valid_for: 1y
        names:     [ "cc_uploader" ]
        usage:     [ client_auth ]
      cc_bridge_cc_uploader_server:
        valid_for: 1y
        names:     [ "cc-uploader.service.cf.internal" ]
        usage:     [ server_auth ]
      cc_bridge_tps:
        valid_for: 1y
        names:     [ "tps_watcher" ]
        usage:     [ client_auth ]
      cc_tls:
        valid_for: 1y
        names:     [ "cloud-controller-ng.service.cf.internal" ]
        usage:     [ server_auth, client_auth ]
      cc_public_tls:
        valid_for: 1y
        names:     [ "api.system.${params.base_domain}",
                     "cloud-controller-ng.service.cf.internal" ]

      diego_auctioneer_client: #was diego/certs/auctioneer_client
        valid_for: 1y
        names:     [ "auctioneer client" ]
        usage:     [ client_auth ]
      diego_auctioneer_server: #was diego/certs/auctioneer
        valid_for: 1y
        names:     [ "auctioneer.service.cf.internal",
                     "*.auctioneer.service.cf.internal"]
        usage:     [ server_auth ]

      diego_bbs_client: #was diego/certs/bbs_client
        valid_for: 1y
        names:     [ "bbs client" ]
        usage:     [ client_auth ]
      diego_bbs_server: #was diego/certs/bbs
        valid_for: 1y
        names:     [ "bbs.service.cf.internal",
                     "*.bbs.service.cf.internal" ]
        usage:     [ server_auth, client_auth ]

      diego_locket_client: #was diego/certs/bbs_client
        valid_for: 1y
        names:     [ "locket client" ]
        usage:     [ client_auth ]
      diego_locket_server: #was diego/certs/bbs
        valid_for: 1y
        names:     [ "locket.service.cf.internal",
                     "*.locket.service.cf.internal",
                     "127.0.0.1" ]
        usage:     [ server_auth ]

      diego_rep_client: #was diego/certs/rep_client
        valid_for: 1y
        names:     [ "rep client" ]
        usage:     [ client_auth ]
      diego_rep_agent_v2: #was diego/certs/rep
        valid_for: 1y
        names:     [ "cell.service.cf.internal",
                     "*.cell.service.cf.internal",
                     "127.0.0.1",
                     "localhost" ]
        usage:     [ server_auth, client_auth ]

      gorouter_backend_tls:
        valid_for: 1y
        names:     [ "gorouter_backend_tls",
                    "gorouter.service.cf.internal" ]
        usage:     [ client_auth ]

      logcache_ssl:
        valid_for: 1y
        names:     [ "log-cache",
                      "log-cache.system.${params.base_domain}",
                     "*.log-cache.system.${params.base_domain}" ]
      loggregator_rlp_gateway_tls:
        valid_for: 1y
        names:     [ "log-stream.system.${params.base_domain}",
                     "log-api.service.cf.internal" ]
      loggregator_rlp_gateway_tls_cc:
        valid_for: 1y
        names:     [ "rlp-gateway" ]
        usage:     [ client_auth ]
      loggregator_tls_cc_tc:
        valid_for: 1y
        names:     [ "trafficcontroller" ]
        usage:     [ client_auth ]
      loggregator_trafficcontroller_tls:
        valid_for: 1y
        names:     [ "doppler.system.${params.base_domain}",
                     "log-api.service.cf.internal" ]
      scheduler_api_tls:
        valid_for: 1y
        names:     [ "ss-scheduler" ]
        usage:     [ server_auth, client_auth ]

      ssh_proxy_backends_tls: #was diego/certs/ssh_proxy_backend_tls
        valid_for: 1y
        names:     [ "ssh_proxy_backend_tls",
                    "ssh-proxy.service.cf.internal" ]
        usage:     [ client_auth ]

    log_cache/certs:
      ca:
        valid_for: 1y
        names:     [ "log-cache" ]
      server:
        valid_for: 1y
        names:     [ "log-cache",
                     "log_cache",
                     "logcache" ]
        usage:     [ server_auth, client_auth ]
      cc_logcache_tls:
        valid_for: 1y
        names:     [ "cloud-controller-ng.service.cf.internal",
                     "api.system.${params.base_domain}" ]
      proxy_tls:
        valid_for: 1y
        names:     [ "localhost" ]

    loggregator/certs:
      ca:
        valid_for: 1y
        names:     [ "loggregatorCA" ]
      loggregator_tls_statsdinjector:
        valid_for: 1y
        names:     [ "statsdinjector" ]
        usage:     [ client_auth ]
      loggregator_tls_agent:
        valid_for: 1y
        names:     [ "metron" ]
        usage:     [ server_auth, client_auth ]
      loggregator_tls_doppler:
        valid_for: 1y
        names:     [ "doppler" ]
        usage:     [ server_auth, client_auth ]
      loggregator_tls_tc:
        valid_for: 1y
        names:     [ "trafficcontroller" ]
        usage:     [ server_auth, client_auth ]
      loggregator_tls_rlp:
        valid_for: 1y
        names:     [ "reverselogproxy" ]
        usage:     [ server_auth, client_auth ]
      loggregator_tls_rlp_gateway:
        valid_for: 1y
        names:     [ "rlp_gateway" ]
        usage:     [ client_auth ]
      adapter_rlp_tls:
        valid_for: 1y
        names:     [ "ss-adapter-rlp" ]
        usage:     [ server_auth, client_auth ]
      adapter_tls:
        valid_for: 1y
        names:     [ "ss-adapter" ]
        usage:     [ server_auth, client_auth ]
      scheduler_client_tls:
        valid_for: 1y
        names:     [ "ss-scheduler" ]
        usage:     [ client_auth ]
      logs_provider:
        valid_for: 1y
        names:     [ "log-cache" ]
        usage:     [ server_auth, client_auth ]

    metrics/certs: #was prometheus/certs/...
      ca:
        valid_for: 1y
        names:     [ "metricScraperCA" ]
      forwarder_agent_metrics_tls:
        valid_for: 1y
        names:     [ "forwarder_agent_metrics" ]
        usage:     [ server_auth ]
      log_cache_metrics_tls:
        valid_for: 1y
        names:     [ "log_cache_metrics" ]
        usage:     [ server_auth ]
      log_cache_cf_auth_proxy_metrics_tls:
        valid_for: 1y
        names:     [ "log_cache_cf_auth_proxy_metrics" ]
        usage:     [ server_auth ]
      log_cache_gateway_metrics_tls:
        valid_for: 1y
        names:     [ "log_cache_gateway_metrics" ]
        usage:     [ server_auth ]
      loggregator_agent_metrics_tls:
        valid_for: 1y
        names:     [ "loggregator_agent_metrics" ]
        usage:     [ server_auth ]
      loggr_udp_forwarder_tls:
        valid_for: 1y
        names:     [ "loggr_udp_forwarder_metrics" ]
        usage:     [ server_auth ]
      prom_scraper_scrape_tls:
        valid_for: 1y
        names:     [ "prom_scraper" ]
        usage:     [ client_auth ]
      prom_scraper_metrics_tls:
        valid_for: 1y
        names:     [ "prom_scraper_metrics" ]
        usage:     [ server_auth ]
      rlp_gateway_metrics_tls:
        valid_for: 1y
        names:     [ "rlp_gateway_metrics" ]
        usage:     [ server_auth ]

    network_policy/certs:
      ca:
        valid_for: 1y
        names:     [ "networkPolicyCA" ]
      client:
        valid_for: 1y
        names:     [ "clientName" ]
        usage:     [ client_auth ]
      server:
        valid_for: 1y
        names:     [ "policy-server.service.cf.internal" ]
        usage:     [ server_auth ]
      server_external:  #new
        valid_for: 1y
        names:     [ "api.system.${params.base_domain}" ]
        usage:     [ server_auth ]

    router/certs:
      ca:
        valid_for: 1y
        names:     [ "routerCA" ]
      ssl:
        valid_for: 1y
        names:     [ "routerSSL",
                      "system.${params.base_domain}",
                      "*.system.${params.base_domain}" ]
        usage:     [ server_auth ]

    silk/certs:
      ca:
        valid_for: 1y
        names:     [ "silk-ca" ]
      controller:  #was server
        valid_for: 1y
        names:     [ "silk-controller.service.cf.internal" ]
        usage:     [ server_auth ]
      daemon:      #was client
        valid_for: 1y
        names:     [ "silk-daemon" ]
        usage:     [ client_auth ]

    uaa/certs:
      ca:
        valid_for: 1y
        names:     [ "uaaCA" ]
      login_saml:
        valid_for: 1y
        names:     [ "uaa_login_saml" ]
      ssl:
        valid_for: 1y
        names:     [ "uaa.service.cf.internal" ]

  dns-service-discovery:
    cf_app_sd/certs: # was service-disco
      ca:
        valid_for: 1y
        names:     [ "service-discovery-controller.service.cf.internal" ]
      server:
        valid_for: 1y
        names:     [ "service-discovery-controller.service.cf.internal" ]
        usage:     [ server_auth ]
      client:
        valid_for: 1y
        names:     [ "service-discovery-controller.service.cf.internal" ]
        usage:     [ client_auth ]

  self-signed:
    haproxy:
      ca:
        valid_for: 1y
        names:     [ "haProxyCA" ]
      ssl:
        valid_for: 1y
        names:     [ "*.${params.base_domain}",
                     "*.system.${params.base_domain}",
                     "*.run.${params.base_domain}",
                     "*.uaa.system.${params.base_domain}",
                     "*.login.system.${params.base_domain}" ]

  autoscaler:
    autoscaler/certs:
      ca:
        valid_for: 1y
        names:     [ "autoscalerCA" ]
      scheduler_client:
        valid_for: 1y
        names:     [ "scheduler client" ]
      scheduler_server:
        valid_for: 1y
        names:     [ "autoscalerscheduler.service.cf.internal" ]
      servicebroker_client:
        valid_for: 1y
        names:     [ "servicebroker client" ]
      servicebroker_public:
        valid_for: 1y
        names:     [ "autoscalerservicebroker.system.${params.base_domain}" ]
      servicebroker_server:
        valid_for: 1y
        names:     [ "servicebroker.service.cf.internal" ]
      apiserver_client:
        valid_for: 1y
        names:     [ "apiserver client" ]
      apiserver_public:
        valid_for: 1y
        names:     [ "autoscaler.system.${params.base_domain}" ]
      apiserver_server:
        valid_for: 1y
        names:     [ "apiserver.service.cf.internal" ]
      metricscollector_client:
        valid_for: 1y
        names:     [ "metricscollector client" ]
      metricscollector_server:
        valid_for: 1y
        names:     [ "metricscollector.service.cf.internal" ]
      scalingengine_client:
        valid_for: 1y
        names:     [ "scalingengine client" ]
      scalingengine_server:
        valid_for: 1y
        names:     [ "scalingengine.service.cf.internal" ]
      eventgenerator_server:
        valid_for: 1y
        names:     [ "eventgenerator.service.cf.internal" ]
      eventgenerator_client:
        valid_for: 1y
        names:     [ "eventgenerator client" ]

  routing-api:
    routing_api/certs:
      ca:
        valid_for: 1y
        names:     [ "routing_api" ]
      client:
        valid_for: 1y
        names:     [ "routing-api-client" ]
        usage:     [ client_auth ]
      server:
        valid_for: 1y
        names:     [ "routing-api.service.cf.internal" ]
        usage:     [ server_auth ]

credentials:
  base:
    consul/encryption_key:
      current: random 64 fixed #FIXME: rotation requires old + new present and manual key rotation

    nats:
      password: random 64

    admin_user:
      password: random 64

    uaa/encryption_key:
      current: random 64 fixed
    uaa/jwt_signing_key: rsa 4096 fixed
    uaa/client_secrets:
      admin_client:   random 64
      app_autoscaler: random 64
      cc_broker:      random 64
      cc_service_key_client: random 64
      cc_routing:     random 64
      cc_user_lookup: random 64
      doppler:        random 64
      firehose:       random 64
      gorouter:       random 64
      notifications:  random 64
      ssh_proxy:      random 64
      tcp_emitter:    random 64
      tcp_router:     random 64
      network_policy: random 64
      cf_smoke_tests: random 64

    cc:
      directory_key:     random 16 allowed-chars a-z0-9 fixed
      bulk_api:          random 64
      internal_api:      random 64
      staging_upload:    random 64
      db_encryption_key: random 64 fixed

    loggregator/endpoint:
      secret: random 64

    gorouter/route_services:
      secret: random 64
    gorouter/status:
      password: random 64

    diego/encryption_key:
      value: random 64 fixed

    ssh_proxy/host_key: ssh 2048

  blobstore-webdav: *local-blobstore-creds
  local-blobstore: &local-blobstore-creds
    blobstore/creds:
      password: random 64
      secret:   random 64

  local-ha-db: *local-db-creds
  autoscaler-postgres: *local-db-creds
  db-internal-postgres: *local-db-creds
  local-db: &local-db-creds
    uaadb:
      password: random 64
    ccdb:
      password: random 64
    diegodb:
      password: random 64
    shield:
      password: random 64
    autoscalerdb:
      password: random 64
    cfnetworkingdb:
      password: random 64
    locketdb:
      password: random 64
    routingapidb:
      password: random 64

  autoscaler:
    autoscaler/servicebroker_account:
      username: random 16
      password: random 64
