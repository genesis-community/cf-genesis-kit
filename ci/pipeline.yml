---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Genesis Release pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2018-01-23

meta:
  kit:      (( param "Which kit is this pipeline for?" ))
  name:     (( concat meta.kit "-genesis-kit" ))
  release:  (( concat meta.kit " Genesis Kit" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  vault:
    url:   (( param "Please provide the address of your Vault" ))
    token: (( param "Please provide a Vault Token" ))

  git:
    email: ci@starkandwayne.com
    name:  Stark & Wayne CI Bot

  image:
    name: starkandwayne/genesis
    tag: latest
  cats-image:
    name: starkandwayne/concourse-go
    tag: latest

  aws:
    bucket:      genesis-pipeline
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  bosh:
    uri:        (( param "Please specify the Genesis CI BOSH Director URI" ))
    cacert:     (( param "Please specify the Genesis CI BOSH Director Root CA cert" ))
    username:   admin
    password:   (( param "Please specify the Genesis CI BOSH Director admin password" ))
  cats:
    tag:         (( param "Please specify the CATS REPO Version TAG "))
    git_ssh_url: (( param "Please specify the CATS REPO SSH URL "))
  shout:
    topic:    (( concat meta.name "-pipeline" ))
    url:      (( param "Please specify the Shout! endpoint" ))
    username: (( param "Please specify the Shout! operations username" ))
    password: (( param "Please specify the Shout! operations password" ))


    metadata:
      build-team-name:     $BUILD_TEAM_NAME
      build-job-name:      $BUILD_JOB_NAME
      build-pipeline-name: $BUILD_PIPELINE_NAME

    links:
      pipeline: (( concat meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME" ))
      build:    (( concat meta.shout.links.pipeline "/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME" ))
  jobs:
    cats:
      attempts: 5
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.cats-image.name ))
            tag:        (( grab meta.cats-image.tag ))
        inputs:
          - { name: git, path: kit }
          - { name: cats-git, path: cats }
          - { name: work }
        run:
          path: bash
          args:
          - -ce
          - |
            #!/bin/bash
            source kit/ci/scripts/cats.sh
            git config --global user.name  "$GIT_NAME"
            git config --global user.email "$GIT_EMAIL"

            ln -sf $(pwd)/kit/ $(pwd)/work/cf-deployments/dev

            safe target da-vault "$VAULT_URI" -k
            echo "$VAULT_TOKEN" | safe auth token
            safe read secret/handshake
            pushd kit
              run_cats --deployment-dir $(pwd)/../
            popd

        params:
          GENESIS_HONOR_ENV:    1
          GIT_NAME:             (( grab meta.git.name ))
          GIT_EMAIL:            (( grab meta.git.email ))
          VAULT_URI:            (( grab meta.vault.url ))
          VAULT_TOKEN:          (( grab meta.vault.token ))
          KIT_SHORTNAME:        (( grab meta.kit ))
          BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
          BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
          SKIP_CATS:            false
          FAILFAST:             true
          VERBOSE:              false
          CATS_NODES:           2
          RUN_CATS:             null
    testflight:
      name: testflight
      task: testflight
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - { name: git, path: kit }
        outputs:
          - { name: work }
        run:
          path: ./kit/ci/scripts/testflight
          args: []
        params:
          GENESIS_HONOR_ENV:    1
          GIT_NAME:             (( grab meta.git.name ))
          GIT_EMAIL:            (( grab meta.git.email ))
          VAULT_URI:            (( grab meta.vault.url ))
          VAULT_TOKEN:          (( grab meta.vault.token ))
          KIT_SHORTNAME:        (( grab meta.kit ))
          BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
          BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
          BOSH_CLIENT:          (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
    
    testflight-config:
      params:
        SKIP_FRESH:           false
        SKIP_CLEAN:           true
        SKIP_SMOKE_TESTS:     true
    cleanup-config:
       params:
         SKIP_FRESH:           true
         SKIP_CLEAN:           true
         SKIP_SMOKE_TESTS:     true


groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - testflight
      - pre
      - rc
      - shipit
      - major
      - minor

jobs:
  - name: testflight
    public: true
    serial: true
    serial_groups: [genesis-ci]
    plan:
    - name: main
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: tests job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: tests job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))
      do:
      - name: get
        in_parallel:
          steps:
            - { get: git, trigger: true }
            - { get: cats-git, params: { submodule_recursive: true } }
      - .: (( inject meta.jobs.testflight ))
        task: deploy
        config:
          .: (( inject meta.jobs.testflight-config ))
                  
    - name: cats
      in_parallel:
        fail_fast: true
        limit: 3
        steps:
          - .: (( inject meta.jobs.cats ))
            task: cats-apps
            config:
              params:
                RUN_CATS: include_apps
          - .: (( inject meta.jobs.cats ))
            task: cats-detect
            config:
              params:
                RUN_CATS: include_detect
          - .: (( inject meta.jobs.cats ))
            task: cats-routing
            config:
              params:
                RUN_CATS: include_routing
          - .: (( inject meta.jobs.cats ))
            task: cats-backend-compability
            config:
              params:
                RUN_CATS: include_backend_compatibility
          - .: (( inject meta.jobs.cats ))
            task: cats-internet-dependent
            config:
              params:
                RUN_CATS: include_internet_dependent
          - .: (( inject meta.jobs.cats ))
            task: cats-route-services
            config:
              params:
                RUN_CATS: include_route_services
          - .: (( inject meta.jobs.cats ))
            task: cats-sec-grps
            config:
              params:
                RUN_CATS: include_security_groups
          - .: (( inject meta.jobs.cats ))
            task: cats-services
            config:
              params:
                RUN_CATS: include_services
          - .: (( inject meta.jobs.cats ))
            task: cats-ssh
            config:
              params:
                RUN_CATS: include_ssh
          - .: (( inject meta.jobs.cats ))
            task: cats-sso
            config:
              params:
                RUN_CATS: include_sso
          - .: (( inject meta.jobs.cats ))
            task: cats-tasks
            config:
              params:
                RUN_CATS: include_tasks
          - .: (( inject meta.jobs.cats ))
            task: cats-v3
            config:
              params:
                RUN_CATS: include_v3
          - .: (( inject meta.jobs.cats ))
            task: cats-deployments
            config:
              params:
                RUN_CATS: include_deployments
          - .: (( inject meta.jobs.cats ))
            task: cats-service_discovery
            config:
              params:
                RUN_CATS: include_service_discovery
          - .: (( inject meta.jobs.cats ))
            task: cats-capi_no_bridge
            config:
              params:
                RUN_CATS: include_capi_no_bridge
    - .: (( inject meta.jobs.testflight ))
      task: clean
      config:
        .: (( inject meta.jobs.cleanup-config ))
  - name: pre
    public: true
    serial: true
    plan:
    - do:
      - in_parallel:
          steps:
            - { get: git,     trigger: true,  passed: [testflight] }
            - { get: version, trigger: true }
      - task: release-notes
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
              - { name: git }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'pre' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'pre' failed (which is unusual).
          ok:      no
          link:    (( grab meta.shout.links.build ))

  - name: rc
    public: true
    serial: true
    plan:
    - do:
      - in_parallel:
          steps:
            - { get: git,     trigger: true,  passed: [pre] }
            - { get: version, trigger: false, passed: [pre], params: {pre: rc} }
      - put: version
        params: {file: version/number}
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'rc' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'rc' failed (which is unusual).
          ok:      no
          link:    (( grab meta.shout.links.build ))

  - name: minor
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: minor version bump job 'minor' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: minor version bump job 'minor' failed (which is unusual).
          ok:      no
          link:    (( grab meta.shout.links.build ))

  - name: major
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: major version bump job '$BUILD_JOB_NAME' succeeded.
          ok:      no
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: major version bump job '$BUILD_JOB_NAME' failed (which is unusual).
          ok:      no
          link:    (( grab meta.shout.links.build ))

  - name: shipit
    public: true
    serial: true
    plan:
    - do:
      - name: inputs
        in_parallel:
          steps:
            - { get: version, resource: version, passed: [rc], params: {bump: final} }
            - { get: git,     passed: [rc] }
      - name: release
        task: release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: version
            - name: git
          outputs:
            - name: gh
            - name: pushme
            - name: notifications
          run:
            path: ./git/ci/scripts/shipit
            args: []
          params:
            REPO_ROOT:    git
            VERSION_FROM: version/number
            RELEASE_ROOT: gh
            REPO_OUT:     pushme
            NOTIFICATION_OUT: notifications
            BRANCH:        (( grab meta.github.branch ))
            GITHUB_OWNER:  (( grab meta.github.owner ))
            GIT_EMAIL:     (( grab meta.git.email ))
            GIT_NAME:      (( grab meta.git.name ))
            KIT_SHORTNAME: (( grab meta.kit ))

      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme/git
      - name: github-release
        put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
      - name: version-bump
        put: version
        params:
          bump: patch
      - name: notify
        in_parallel:
          steps:
            - put: notify
              params:
                method: announce
                file: notifications/message
                link: (( concat meta.github.uri "/releases" ))
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release job '$BUILD_JOB_NAME' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release job '$BUILD_JOB_NAME' failed.
          ok:      no
          link:    (( grab meta.shout.links.build ))

resource_types:
  - name: shout-notification
    type: docker-image
    source:
      repository: huntprod/shout-resource

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: cats-git
    type: git
    source:
      uri:         (( grab meta.cats.git_ssh_url ))
      branch:      (( grab meta.cats.tag ))


  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               (( concat meta.name "/version" ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: shout-notification
    source:
      topic:    (( grab meta.shout.topic ))
      url:      (( grab meta.shout.url ))
      username: (( grab meta.shout.username ))
      password: (( grab meta.shout.password ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
      
