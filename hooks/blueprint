#!/bin/bash
set -u
#Version check
min_version="2.7.0"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

switch_cf_version() {
  describe >&2 "" \
    "- #y{Experimental Feature Enabled:} Custom cf-deployment version: $version"
  cfd_file="$GENESIS_ROOT/.genesis/kits/addons/cf-deployment-${version}.tar.gz"
  if ! [[ -f "$cfd_file" ]] ; then
    # Download
    describe >&2 \
      "  #i{Fetching cf-deployment-${version} release from cloudfoundry/cf-deployment}" \
      "  #i{on github.com}"
    mkdir -p "$GENESIS_ROOT/.genesis/kits/addons/"
    curl -sSL -o "$cfd_file" "https://github.com/cloudfoundry/cf-deployment/archive/v${version}.tar.gz" > /dev/null
    if ! [[ -f "$cfd_file" ]] ; then
      describe >&2 "" \
        "  #R{[ERROR]} Failed to download cf-deployment v$version -- cannot continue" ""
      exit 1
    fi
    topdir="$(tar -ztf "$cfd_file" | awk '{print $NF}' | cut -d'/' -f1 | uniq)"
    if [[ $topdir != "cf-deployment-$version" ]] ; then
      describe >&2 "" \
        "  #R{[ERROR]} Downloaded cf-deployment v$version doesn't look like a valid release  -- cannot continue" ""
      exit 1
    fi
  else
    describe >&2 \
      "  #i{Using cached copy of cf-deployment-${version} release}"
  fi

  rm -rf "./cf-deployment"
  mkdir "./cf-deployment"
  tar -xz -C "./cf-deployment/" --strip-components 1 -f "$cfd_file" > /dev/null
  echo >&2
}

### ============================================================================
### Main
### ============================================================================

declare -a manifest

### Base configuration with minimal injections required for Genesis compliance
manifest=( \
  "cf-deployment/cf-deployment.yml" \
  "overlay/base.yml" \
  "overlay/upstream_version.yml" \
)

cpi="$(bosh_cpi)" || true

### Minimal injections required for Genesis compliance
if ! want_feature "bare" || want_feature "partitioned-network" ; then
  manifest+=( "operations/rename-network-and-deployment.yml" )
else
  manifest+=( "cf-deployment/operations/rename-network-and-deployment.yml" )
fi

### Set up some best practices if not bare
if ! want_feature "bare" ; then
  manifest+=( \
    "overlay/identity.yml" \
    "overlay/override-app-domains.yml" \
    "overlay/ten-year-ca-expiry.yml" \
    "overlay/uaa-branding.yml" \
  )

  # Change vm types - must be done before operations delete unused instance_types
  if want_feature v1-vm-types ; then
    manifest+=( "overlay/addons/v1-vm-types.yml" )
  fi

  # Deal with availability zones - has to be done to core instance groups
  # before they potentially get removed by further features
  if [[ $cpi == 'azure' ]] || want_feature "small-footprint" || \
     want_feature "cf-deployment/operations/scale-to-one-az"; then
    manifest+=( \
      "cf-deployment/operations/scale-to-one-az.yml" \
      "operations/scale-to-one-az.yml" \
    )
  fi
  manifest+=( "operations/custom-azs.yml" )

  # Temporary override of specific releases - keep but leave empty when upstream catches up
  manifest+=(  "overlay/override-releases/static.yml" )

fi

version=""
abort=
warn=
db_specified=
declare -a features; features=()

opsdir="ops"
[[ -n "${PREVIOUS_ENV:-}" ]] && opsdir=".genesis/cached/${PREVIOUS_ENV}/$opsdir"

for want in $GENESIS_REQUESTED_FEATURES; do
  if [[ "$want" =~ ^cf-deployment-version- ]] ; then
    # Check if explicit verison of cf-deployment is requested
    [[ -z "$version" ]] || bail "#R{[ERROR]} You cannot specify more than one cf-deployment-version-* feature"
    version="${want#"cf-deployment-version-"}"
  else
    # Validate requrested features
    case "$want" in
    shield-dbs|shield-blobstores)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} feature has been deprecated, in favor of BOSH add-ons"
      ;;
    omit-haproxy|local-blobstore|blobstore-webdav|container-routing-integrity|routing-api|loggregator-forwarder-agent)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} feature is now the default behaviour and doesn't need" \
        "          to be specified in the environment file"
      ;;
    blobstore-aws|blobstore-azure|blobstore-gcp)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} feature has been renamed to #c{${want#blobstore-}-blobstore}"
      features+=( "${want#blobstore-}-blobstore" )
      ;;
    db-external-mysql|db-external-postgres)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} flag has been renamed to #c{${want#db-external-}-db}"
      features+=( "${want#db-external-}-db" )
      ;;
    db-internal-postgres|local-db)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} flag has been renamed to #c{local-postgres-db}"
      db_specified=1
      features+=( "local-postgres-db" )
      ;;
    haproxy-tls)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{haproxy-tls} feature flag has been deprecated." \
        "          Please replace it with the #c{haproxy} and #c{tls} flags."
      features+=( "haproxy" "tls" )
      ;;
    haproxy-self-signed)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{haproxy-self-signed} feature flag has been deprecated." \
        "          Please replace it with the #c{haproxy} and #c{self-signed} flags."
      features+=( "haproxy" "self-signed" )
      ;;
    haproxy-notls)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{haproxy-notls} feature flag has been deprecated." \
        "          Please replace it with the #c{haproxy} feature flag." \
        "          You are HIGHLY ENCOURAGED to also add the #c{tls} flag."
      features+=( "haproxy" )
      ;;
    minimum-vms)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The 'minimum-vms' feature flag has been renamed to 'small-footprint'"
      features+=( "small-footprint" )
      ;;
    azure)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{azure} feature does not have to be specified, as it will" \
        "          automatically be applied when deploying via an Azure CPI"
      ;;
    cflinuxfs2)
      abort=1
      describe >&2 \
        "#Y{[ERROR]} The #c{cflinuxfs2} feature is no longer able to be supported."
      ;;
    local-ha-db)
      abort=1
      describe >&2 \
        "#R{[ERROR]} The #c{local-ha-db} feature is no longer able to be supported.  Consider using" \
        "        external database for high-availability."
      ;;
    autoscaler|autoscaler-postgres)
      abort=1
      describe >&2 \
        "#R{[ERROR]} The #c{$want} feature is no longer embedded in the #c{cf} kit.  Please see the" \
        "        cf-app-autoscaler genesis kit."
      ;;
    native-garden-runc)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} feature is no longer supported; it has been replaced by the" \
        "          upstream #c{cf-deployment/operations/experimental/use-native-garden-runc-runner}" \
        "          feature."
      features+=( "cf-deployment/operations/experimental/use-native-garden-runc-runner" )
      ;;
    app-bosh-dns|dns-service-discovery)
      warn=1
      describe >&2 \
        "#Y{[WARNING]} The #c{$want} feature is no longer supported; it has been replaced by the" \
        "          upstream #c{cf-deployment/operations/enable-service-discovery} feature."
      #features+=( "cf-deployment/operations/enable-service-discovery" )
      features+=( "enable-service-discovery" ) #FIXME once spruce can go-patch over (( grabs ))
      ;;
    cf-deployment/operations/enable-service-discovery)
      if ! want_feature "bare" ; then
        features+=( "enable-service-discovery" ) #FIXME remove once spruce can go-patch over (( grabs ))
      fi
      ;;
    compiled-releases)
      want_feature "cf-deployment/operations/use-compiled-releases" || features+=( "compiled-releases" )
      ;;
    small-footprint|cf-deployment/operations/scale-to-one-az)
      # dealt with above, but kept for interoperability checks with other features
      features+=( "small-footprint" );
      ;;
    local-postgres-db|local-mysql-db|mysql-db|postgres-db) db_specified=1; features+=( "$want" ) ;;
    bare|partitioned-network|haproxy|tls|no-nats-tls|self-signed) features+=( "$want" ) ;;
    minio-blobstore|aws-blobstore|aws-blobstore-iam|azure-blobstore|gcp-blobstore|gcp-use-access-key) features+=( "$want" ) ;;
    nfs-volume-services|enable-service-discovery|ssh-proxy-on-routers|no-tcp-routers|smb-volume-services) features+=( "$want" ) ;;
    app-scheduler-integration|app-autoscaler-integration|prometheus-integration|v2-nats-credentials) features+=( "$want" ) ;;
    windows-diego-cells) features+=( "$want" ) ;;
    +migrated-v1-env|+override-db-names) features+=( "$want" ) ;;
    v1-vm-types|no-v1-vm-types)
      : # no-op, dealt with above
      ;;
    cf-deployment/*)
      if [[ -f "$want.yml" ]] ; then
        features+=( "$want" )
      else
        abort=1
        describe >&2 \
          "#R[ERROR]} #c{$want} is not an upstream operation -- see cf-deployment for valid operations."
      fi
      ;;
    *)
      if [[ -f "$GENESIS_ROOT/${opsdir}/$want.yml" || -f "$GENESIS_ROOT/ops/$want.yml" ]] ; then
        features+=( "$want" )
      else
        abort=1
        describe >&2 \
          "#R{[ERROR]} The #c{$want} feature is not supported. See the manual for list" \
          "        of valid features."
      fi
      ;;
    esac
  fi
done

[[ "$abort" == "1" ]] && bail "#R{Cannot continue} - fix your #C{$GENESIS_ENVIRONMENT.yml} file to resolve these issues."
[[ "$warn"  == "1" ]] && describe >&2 "" "Update your #C{$GENESIS_ENVIRONMENT.yml} file to remove these warnings." ""

[[ -n $version ]] && switch_cf_version "$version"
[[ -z "$db_specified" ]] && ! want_feature 'bare' && features+=( "local-postgres-db" )

if [[ "${#features[@]}" -gt 0 ]] ; then
  GENESIS_REQUESTED_FEATURES="${features[*]}"
else
  GENESIS_REQUESTED_FEATURES=""
fi
declare -a blobstores; blobstores=()
declare -a databases; databases=()

if want_feature "+migrated-v1-env" || want_feature "azure-blobstore" || want_feature 'minio-blobstore' || want_feature 'aws-blobstore' || want_feature 'gcp-blobstore' ; then
  want_feature 'bare' && bail "Cannot have #C{bare} feature when migrating from v1"
  manifest+=( "overlay/blobstore/meta.yml" )
fi

params="$(lookup "params" "{}")"
has_availability_zones="$(jq -r '.|has("availability_zones")' <(echo "$params"))"
randomize_az_placement="$(jq -r '.randomize_az_placement//false' <(echo "$params"))"

for want in $GENESIS_REQUESTED_FEATURES; do
  if [[ $want =~ cf-deployment/.* ]] ; then
    if [[ -f "$want.yml" ]] ; then
      manifest+=( "$want.yml" )
    else
      bail "#R[ERROR]} Kit $GENESIS_KIT_NAME/$GENESIS_KIT_VERSION does not support the $want feature" ""
    fi
  elif [[ -f "$GENESIS_ROOT/${opsdir}/$want.yml" ]] ; then
    manifest+=( "$GENESIS_ROOT/${opsdir}/$want.yml" )
  elif [[ -f "$GENESIS_ROOT/ops/$want.yml" ]] ; then
    manifest+=( "$GENESIS_ROOT/ops/$want.yml" )
  else
    case "$want" in

    ###-----------------------------------------------------------------------------
    ## Blobstore
    #
    azure-blobstore)
      blobstores+=( "$want" )
      manifest+=( \
        "overlay/blobstore/external.yml" \
        "overlay/blobstore/azure.yml" \
        "cf-deployment/operations/use-external-blobstore.yml" \
        "cf-deployment/operations/use-azure-storage-blobstore.yml" \
      )
      ;;
    aws-blobstore|aws-blobstore-iam)
      blobstores+=( "$want" )
      manifest+=( \
        "overlay/blobstore/external.yml" \
        "overlay/blobstore/aws.yml" \
        "cf-deployment/operations/use-external-blobstore.yml" \
      )
      want_feature "aws-blobstore-iam" && \
        manifest+=( "overlay/blobstore/aws-iam.yml" )
      ;;
    minio-blobstore)
      blobstores+=( "$want" )
      manifest+=( \
        "overlay/blobstore/external.yml" \
        "overlay/blobstore/minio.yml" \
        "cf-deployment/operations/use-external-blobstore.yml" \
      )
      ;;
    gcp-blobstore)
      blobstores+=( "$want" )
      if want_feature gcp-use-access-key ; then
        manifest+=( \
          "overlay/blobstore/external.yml" \
          "cf-deployment/operations/use-external-blobstore.yml" \
          "cf-deployment/operations/use-gcs-blobstore-access-key.yml" \
        )
      else
        manifest+=( \
          "overlay/blobstore/external.yml" \
          "cf-deployment/operations/use-external-blobstore.yml" \
          "cf-deployment/operations/use-gcs-blobstore-service-account.yml" \
        )
      fi
      ;;

    ###-----------------------------------------------------------------------------
    ## Database
    #

    mysql-db|postgres-db)
      databases+=( "$want" )
      manifest+=( \
        "cf-deployment/operations/use-external-dbs.yml" \
        "operations/use-external-dbs-ports.yml" \
        "overlay/db/external.yml" \
        "overlay/db/external-${want%-db}.yml" \
      )
      ;;

    local-postgres-db)
      databases+=( "$want" )
      manifest+=( "cf-deployment/operations/use-postgres.yml" )
      if want_feature '+override-db-names' ; then
        manifest+=( \
          "operations/db-override-names.yml" \
          "operations/db-override-postgres-names.yml" \
          "overlay/db/internal-overrides.yml" \
        )
        if want_feature '+migrated-v1-env' ; then
          manifest+=( "overlay/addons/migration-db-override-names.yml" )
        fi
      fi
      ;;

    local-mysql-db)
      databases+=( "$want" )
      manifest+=( "overlay/db/local-mysql-db.yml" )
      if want_feature '+override-db-names' ; then
        manifest+=( \
          "operations/db-override-names.yml" \
          "operations/db-override-mysql-names.yml" \
          "overlay/db/internal-overrides.yml" \
        )
        if want_feature '+migrated-v1-env' ; then
          manifest+=( "overlay/addons/migration-db-override-names.yml" )
        fi
      fi
      ;;

    ###-----------------------------------------------------------------------------
    ## Addons
    #

    compiled-releases)
      manifest+=( \
        "cf-deployment/operations/use-compiled-releases.yml" \
        "overlay/override-releases/compiled.yml"
      ) ;;
    small-footprint)
      : ;; # already dealt with
    nfs-volume-services)
      manifest+=( \
        "cf-deployment/operations/enable-nfs-volume-service.yml" \
      )
      if ! want_feature "bare" ; then
        manifest+=( \
          "overlay/addons/nfs-volume-service.yml" \
        )
      fi
      ;;
    smb-volume-services)
      manifest+=( \
        "cf-deployment/operations/enable-smb-volume-service.yml" \
      )
      if ! want_feature "bare" ; then
        manifest+=( \
          "overlay/addons/smb-volume-service.yml" \
        )
      fi
    ;;
    enable-service-discovery)
      manifest+=( "overlay/enable-service-discovery.yml" ) ;;
    app-autoscaler-integration)
      manifest+=( "overlay/addons/autoscaler.yml" ) ;;
    app-scheduler-integration)
      manifest+=( "overlay/addons/app-scheduler.yml" ) ;;
    prometheus-integration)
      manifest+=( "overlay/addons/prometheus.yml" ) ;;
    ssh-proxy-on-routers)
      manifest+=( "overlay/addons/ssh-proxy-on-routers.yml" ) ;;
    no-tcp-routers)
      manifest+=( "overlay/addons/no-tcp-routers.yml" ) ;;
    windows-diego-cells)
      manifest+=( \
        "cf-deployment/operations/windows2019-cell.yml" \
        "cf-deployment/operations/use-online-windows2019fs.yml" \
        "cf-deployment/operations/use-latest-windows2019-stemcell.yml" \
        "overlay/override-releases/static-windows.yml" \
      )
      if want_feature "compiled-releases"; then
        manifests+=( \
          "cf-deployment/operations/experimental/use-compiled-releases-windows.yml" \
          "overlay/override-releases/compiled-windows.yml" \
        )
      fi
      if ! want_feature "bare" ; then
        manifest+=( \
          "overlay/windows.yml" \
        )
      fi
      ;;
    +migrated-v1-env)
      manifest+=( "overlay/addons/migration.yml" ) ;;

    esac

    ###-----------------------------------------------------------------------------
    ## HAProxy
    #

    if [[ "$want" ==  "haproxy" ]]; then
      manifest+=( "overlay/routing/haproxy.yml" )
      if jq  -e '(.cf_lb_network // "") != ""'  <(echo "$params") &>/dev/null; then
        manifest+=( "overlay/routing/haproxy-public-network.yml" )
      fi
      if want_feature "tls"; then
        manifest+=( "overlay/routing/haproxy-tls.yml" )
        if ! want_feature "self-signed"; then
          manifest+=( "overlay/routing/haproxy-provided-cert.yml" )
        fi
      fi
      want_feature "small-footprint" && manifest+=( "overlay/routing/haproxy-small-footprint.yml" )
    fi

  fi
done

if [[ "${#blobstores[@]}" -gt 1 ]] ; then
  bail "#R{[ERROR]} Too many blobstores selected; pick only one of: ${blobstores[*]}"
fi
if [[ "${#databases[@]}" -gt 1 ]] ; then
  bail "#R{[ERROR]} Too many databases selected; pick only one of: ${databases[*]}"
fi

if [[ "$has_availability_zones" == 'true' || "$randomize_az_placement" == 'true' ]] ; then
  if want_feature "bare"; then
    bail "#R{[ERROR]} #M{params.availibility_zones} and #M{params.randomize_az_placement} are not compatible" \
         "        with features #C{bare}."
  fi
fi
if ! want_feature "bare" ; then

  want_feature "no-nats-tls" || manifest+=( "overlay/nats-tls.yml" )
  if want_feature '+migrated-v1-env' && ! want_feature 'v2-nats-credentials'; then
    manifest+=( "overlay/addons/migration-v1-nats-credentials.yml" )
    want_feature "no-nats-tls" ||  manifest+=( "overlay/addons/migration-v1-nats-credentials-tls.yml" )
  fi

  # Handle ssl validation
  skip_ssl_validation="$(jq -r '.skip_ssl_validation' <(echo "$params"))"
  if [[ "$skip_ssl_validation" == 'false' ]] ; then
    if ! want_feature "cf-deployment/operations/stop-skipping-tls-validation"; then
      manifest+=(  "cf-deployment/operations/stop-skipping-tls-validation" )
    fi
  fi

  if [[ "${#databases}" == 0 ]]; then
    manifest+=( "cf-deployment/operations/use-postgres.yml" )
  fi

  ###-----------------------------------------------------------------------------
  ## IaaS
  #

  # Deal with IaaS peculiarities
  case "$cpi" in
  azure)
    # TODO: if this turns out needed, we may re-introduce `azure` feature to include it when bare is specified
    if [[ "$has_availability_zones" == 'true' || "$randomize_az_placement" == 'true' ]] ; then
      bail "#R{[ERROR]} #M{params.availibility_zones} and #M{params.randomize_az_placement} are not compatible" \
           "        with deployments to Azure infrastructure."
    fi
    manifest+=( \
      "cf-deployment/operations/azure.yml"
      "operations/azure-availability_sets.yml" \
    )
    ;;
  warden)
    manifest+=( "cf-deployment/operations/bosh-lite.yml" )
    ;;
  esac

  ###-----------------------------------------------------------------------------
  ## Dynamic instance counts
  #
  instance_group_counts="$(
    echo "$params" | \
    jq -r 'with_entries(if (.key|test("_instances$")) then {key: (.key|capture("(?<k>.*)_instances$")|.k), value: .value} else empty end )|to_entries | .[] | "\(.key) \(.value)"' \
  )"
  if [[ -n "$instance_group_counts" ]] ; then
    used=''
    counts_op_file="operations/dynamic/instance_counts.yml"
    echo "--- # Dynamically created instance count overrides" > "$counts_op_file"
    while read -r inst_grp count; do
      [[ $inst_grp == "errand" ]]      && continue # dealt with above
      [[ $inst_grp == "haproxy" ]]     && continue # dealt with elsewhere
      [[ $inst_grp == "cell" ]]        && inst_grp="diego_cell" && echo >&2 "WARNING: params.cell_instances has been translated as params.diego_cell_instances";
      [[ $inst_grp == "diego" ]]       && inst_grp="scheduler" && echo >&2 "WARNING: params.diego_instances has been translated as params.scheduler_instances";
      [[ $inst_grp == "bbs" ]]         && inst_grp="diego_api" && echo >&2 "WARNING: params.bbs_instances has been translated as params.diego_api_instances";
      [[ $inst_grp == "loggregator" ]] && inst_grp="log_api" && echo >&2 "WARNING: params.loggregator_instances has been translated as params.log_api_instances";
      [[ $inst_grp == "postgres" ]]    && inst_grp="database" && echo >&2 "WARNING: params.postgres_instances has been translated as params.database_instances";
      [[ $inst_grp == "blobstore" ]]   && inst_grp="singleton-blobstore" && echo >&2 "WARNING: params.blobstore_instances has been translated as params.singleton_blobstore_instances";
      [[ $inst_grp == "windows_diego_cell" ]]     && inst_grp="windows2019-cell" && echo >&2 "WARNING: params.windows_diego_cell_instances has been translated as params.windows2019-cell_instances";

      dashed_inst_grp="$(echo "$inst_grp" | tr _ -)" # convert any _ into -
      found=''
      if [[ $dashed_inst_grp =~ ^(api|cc-worker|credhub|database|diego-(api|cell)|doppler|errand|haproxy|log-api|nats|windows2019-cell|rotate-cc-database-key|(tcp-)?router|scheduler|singleton-blobstore|smoke-tests|uaa)$ ]] ; then
        inst_grp="$dashed_inst_grp";
        found=1
      fi
      cat <<EOF >> "$counts_op_file"
  - type: replace
    path: /instance_groups/name=${inst_grp}/instances
    value: ${count}
EOF
      used="$(echo "$used"; echo "$inst_grp")"
      if [[ -z "$found" ]] ; then
        describe >&2 \
          "#R{[WARNING]} Unknown instance group $inst_grp - this may be bug in your environment files." \
          "        Expected instance groups are:" \
          "          api, cc-worker, credhub, database, diego-api, diego-cell, doppler," \
          "          errand, haproxy, log-api, nats, rotate-cc-database-key, router, scheduler," \
          "          singleton-blobstore, smoke-tests, tcp-router, and uaa" ""
      fi
    done < <(echo "$instance_group_counts")

    # Deal with errand meta-type
    errand_instances="$(echo "$params" | jq -r '.errand_instances//""')"
    if [[ -n "$errand_instances" ]] ;then
      for errand_name in smoke-tests rotate-cc-database-key ; do
        if ! echo "$used" | grep "^$errand_name\$" &>/dev/null; then
          cat <<EOF >> "$counts_op_file"
  - type: replace
    path: /instance_groups/name=${errand_name}/instances
    value: ${errand_instances}
EOF
          used="$(echo "$used";echo "$errand_name")"
        fi
      done
    fi

    # Check for dups
    dups="$(echo "$used"|sort|uniq -d)";
    if [[ -n "$dups" ]] ; then
      bail \
        "#R{[ERROR]} Instance counts specified (or translated as) multiple times:" "$dups"
    fi
    manifest+=( "$counts_op_file" )
  fi

  ###-----------------------------------------------------------------------------
  ## Dynamic instance vm types
  #
  instance_types="$(
    echo "$params" | \
    jq -r 'with_entries(if (.key|test("_vm_type$")) then {key: (.key|capture("(?<k>.*)_vm_type$")|.k), value: .value} else empty end )|to_entries | .[] | "\(.key) \(.value)"' \
  )"
  if [[ -n "$instance_types" ]] ; then
    used=''
    types_op_file="operations/dynamic/instance_types.yml"
    echo "--- # Dynamically created instance type overrides" > "$types_op_file"
    while read -r inst_grp type; do
      [[ $inst_grp == "errand" ]]      && continue # dealt with below
      [[ $inst_grp == "haproxy" ]]     && continue # dealt with elsewhere
      [[ $inst_grp == "cell" ]]        && inst_grp="diego_cell" && echo >&2 "WARNING: params.cell_vm_type has been translated as params.diego_cell_vm_type";
      [[ $inst_grp == "diego" ]]       && inst_grp="scheduler" && echo >&2 "WARNING: params.diego_vm_type has been translated as params.scheduler_vm_type";
      [[ $inst_grp == "bbs" ]]         && inst_grp="diego_api" && echo >&2 "WARNING: params.bbs_vm_type has been translated as params.diego_api_vm_type";
      [[ $inst_grp == "loggregator" ]] && inst_grp="log_api" && echo >&2 "WARNING: params.loggregator_vm_type has been translated as params.log_api_vm_type";
      [[ $inst_grp == "postgres" ]]    && inst_grp="database" && echo >&2 "WARNING: params.postgres_vm_type has been translated as params.database_vm_type";
      [[ $inst_grp == "blobstore" ]]   && inst_grp="singleton-blobstore" && echo >&2 "WARNING: params.blobstore_vm_type has been translated as params.singleton_blobstore_vm_type";
      [[ $inst_grp == "windows_diego_cell" ]]     && inst_grp="windows2019-cell" && echo >&2 "WARNING: params.windows_diego_cell_vm_type has been translated as params.windows2019-cell_vm_type";

      dashed_inst_grp="$(echo "$inst_grp" | tr _ -)" # convert any _ into -
      found=''
      if [[ $dashed_inst_grp =~ ^(api|cc-worker|credhub|database|diego-(api|cell)|doppler|errand|haproxy|windows2019-cell|log-api|nats|rotate-cc-database-key|(tcp-)?router|scheduler|singleton-blobstore|smoke-tests|uaa)$ ]] ; then
        inst_grp="$dashed_inst_grp";
        found=1
      fi
      cat <<EOF >> "$types_op_file"
  - type: replace
    path: /instance_groups/name=${inst_grp}/vm_type
    value: ${type}
EOF
      used="$(echo "$used";echo "$inst_grp")"
      if [[ -z "$found" ]] ; then
        describe >&2 \
          "#R{[WARNING]} Unknown instance group $inst_grp - this may be bug in your environment files." \
          "        Expected instance groups are:" \
          "          api, cc-worker, credhub, database, diego-api, diego-cell, doppler," \
          "          errand, haproxy, log-api, nats, rotate-cc-database-key, router, scheduler," \
          "          singleton-blobstore, smoke-tests, tcp-router, uaa, and windows2019-cell" ""
      fi
    done < <(echo "$instance_types")

    # Deal with errand meta-type
    errand_vm_type="$(echo "$params" | jq -r '.errand_vm_type//""')"
    if [[ -n "$errand_vm_type" ]] ;then
      for errand_name in smoke-tests rotate-cc-database-key ; do
        if ! echo "$used" | grep "^$errand_name\$" &>/dev/null ; then
          cat <<EOF >> "$types_op_file"
  - type: replace
    path: /instance_groups/name=${errand_name}/vm_type
    value: ${errand_vm_type}
EOF
          used="$(echo "$used";echo "$errand_name")"
        fi
      done
    fi

    # Check for dups
    dups="$(echo "$used"|sort|uniq -d)";
    if [[ -n "$dups" ]] ; then
      bail \
        "#R{[ERROR]} Instance vm types specified (or translated as) multiple times:" "$dups"
    fi
    manifest+=( "$types_op_file" )
  fi
fi

# Include the migration manifest fragments
version="$(exodus kit_version)"
if [[ -n "${version}" ]] && ! new_enough "${version}" "2.0.0-rc0"; then
  manifest+=( "operations/migrate/cells.yml")

  if want_feature "local-postgres-db"; then # TODO: or postgres-db external??
    manifest+=( "operations/migrate/postgres.yml" )
  fi
  :
fi

echo "${manifest[@]}"
