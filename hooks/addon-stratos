#!/bin/bash

set -eu

declare file buildpack stack create_sgs exodus_path system_api_domain \
  secrets_mount vault_env env_path stratos_domain stratos_db_scheme \
  stratos_db_hostname stratos_db_username stratos_db_password \
  stratos_db_port stratos_db_database stratos_db_sslmode \
  stratos_session_store_sekret stratos_client stratos_client_secret \
  stratos_version stratos_releases_url memory disk timeout stratos_sso_options \
  create_sgs

# NOTE: TODO: all of these values come from cli, then vault, then default.
stratos_version="4.8.1"
stratos_releases_url="https://github.com/cloudfoundry/stratos/releases/download/v${stratos_version}/stratos-ui-4.8.1.zip"
stratos_sso_options="nosplash, logout" # Question: Should this come from vault?
buildpack="binary_buildpack"
stack="cflinuxfs4"
memory="1512M"
disk="2000M"
timeout="180"
create_sgs=false

exodus_path=$(lookup --partial genesis.exodus_base)
system_api_domain="$(exodus api_domain)"
secrets_mount=$(lookup genesis.secrets_mount)
vault_env=$(lookup genesis.env)

case "${GENESIS_REQUESTED_FEATURES}" in
*ocfp*)
  echo "Looking up OCFP information from the manifest, this will take a few moments..."
  config_path=$(lookup --partial meta.ocfp.vault.config)
  secrets_mount=$(lookup --partial genesis.secrets_mount)
  vault_env=$(lookup --partial genesis.vault_env)
  env_path="${secrets_mount}${vault_env}"

  stratos_domain=$(safe get "${config_path}/fqdns:stratos")

  echo "Looking up database credentials from vault at ${env_path}/stratos/db/stratos ..."
  stratos_db_scheme=$(safe get "${env_path}/stratos/db/stratos:scheme")
  stratos_db_hostname=$(safe get "${env_path}/stratos/db/stratos:hostname")
  stratos_db_username=$(safe get "${env_path}/stratos/db/stratos:username")
  stratos_db_password=$(safe get "${env_path}/stratos/db/stratos:password")
  stratos_db_port=$(safe get "${env_path}/stratos/db/stratos:port")
  stratos_db_database=$(safe get "${env_path}/stratos/db/stratos:database")
  stratos_db_sslmode="disable" # or "verify-ca"
  ;;
*)
  stratos_domain="console.$(exodus apps_domain)"

  stratos_db_scheme="postgres"
  stratos_db_hostname=$(lookup params.db_hostname)
  stratos_db_username=$(lookup params.db_username "stratos")
  stratos_db_password=$(lookup params.db_password "stratos")
  stratos_db_port=$(lookup params.db_port 5432)
  stratos_db_database=$(lookup params.db_database "stratos")
  stratos_db_sslmode=$(lookup params.db_sslmode "disabled") # verify-ca
  ;;
esac

stratos_session_store_sekret=$(echo "${RANDOM}" | sha256sum | awk '{print $1}')
echo "The Exodus path for Stratos UAA secrets is ${exodus_path}"
stratos_client=$(safe get "${exodus_path}:stratos_client")
stratos_client_secret=$(safe get "${exodus_path}:stratos_secret")

shift # shift off the "run" argument that genesis passes to hooks
while [[ $# -gt 0 ]]; do
  arg="$1"
  shift
  case $arg in
  file)
    file="${1}"
    shift || fail "Usage: ... file <path/name> # default: will download stratos-ui-packaged.zip from github"
    ;;
  buildpack)
    buildpack="${1}"
    shift || fail "Usage: ... buildpack <name> # default: binary_buildpack"
    ;;
  stack)
    stack="${1}"
    shift || fail "Usage: stack <name> # default: cflinuxfs4"
    ;;
  memory)
    memory="${1}"
    shift || fail "Usage: memory <XXXXM> # default: 1512M"
    ;;
  disk)
    disk="${1}"
    shift || fail "Usage: disk <XXXXM> # default: 1024M"
    ;;
  timeout)
    timeout="${1}"
    shift || fail "Usage: timeout <seconds> # default: 180"
    ;;
  sgs)
    create_sgs=true
    ;;
  esac
done

if [[ -s "${file:-}" ]]; then
  unzip -o "${file}"
else
  echo "Downloading Stratos ${stratos_version}..."
  wget "${stratos_releases_url}" &&
    unzip -o stratos-ui-${stratos_version}.zip &&
    rm stratos-ui-${stratos_version}.zip
fi

cf create-space -o system stratos
cf target -o system -s stratos

################################################################################
echo "Configuring Stratos Database Connection via CUPS Services"
################################################################################
svc_name="console_db_tls_verify_ca"
org=system
space=stratos
org_guid="$(cf org ${org} --guid)"
space_guid="$(cf space ${space} --guid)"
svc="$(
  cf curl "/v3/service_instances?organization_guids=${org_guid}&space_guids=${space_guid}" |
    jq -r '.resources[]|select(.name|test("'${svc_name}'"))|.name'
)"

if [[ ${svc} = "${svc_name}" ]]; then
  echo "Service ${svc_name} was found, update existing cups service definition."
  cf uups console_db_tls_verify_ca -p "$(
    cat <<-EOF
{ "uri": "${stratos_db_scheme}://", "username":"${stratos_db_username}", "password":"${stratos_db_password}", "hostname":"${stratos_db_hostname}", "port":"${stratos_db_port}", "dbname":"${stratos_db_database}", "sslmode":"${stratos_db_sslmode}" }'
EOF
  )"
else
  echo "Service ${svc_name} was not found, creating cups service definition."
  cf cups console_db_tls_verify_ca -p "$(
    cat <<-EOF
{ "uri": "${stratos_db_scheme}://", "username":"${stratos_db_username}", "password":"${stratos_db_password}", "hostname":"${stratos_db_hostname}", "port":"${stratos_db_port}", "dbname":"${stratos_db_database}", "sslmode":"${stratos_db_sslmode}" }'
EOF
  )"
fi

if [[ -n ${create_sgs} ]]; then # Security group that allows to talk to VPC IP Range
  cat >vpc-sg.json <<EOF
[
  {
    "protocol": "all",
    "destination": "192.168.0.1-192.168.16.255"
  }
]
EOF
  cf create-security-group vpc "${PWD}/vpc-sg.json" || true
  cf bind-staging-security-group vpc || true
  cf bind-running-security-group vpc || true
fi

################################################################################
# To the Stratosphere!
################################################################################

cat >manifest.yml <<-APPMANIFEST
---
applications:
  - name: console
    health-check-type: port
    memory: ${memory}
    disk_quota: ${disk}
    timeout: ${timeout}
    buildpacks:
     - ${buildpack}
    stack: ${stack}
    env:
      CF_API_URL: https://${system_api_domain}
      CF_CLIENT: ${stratos_client}
      CF_CLIENT_SECRET: ${stratos_client_secret}
      SESSION_STORE_SECRET: ${stratos_session_store_sekret}
      SSO_OPTIONS: "${stratos_sso_options}"
      SSO_WHITELIST: "https://${stratos_domain}/*"
      SSO_LOGIN: "true"
      DB_SSL_MODE: "${stratos_db_sslmode}"
    services:
    - console_db_tls_verify_ca
APPMANIFEST

cf push -f manifest.yml
