#!/bin/bash
set -u
#Version check
min_version="2.7.0"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

cc_ok=yes
# Cloud Config checks
if [[ -n "$GENESIS_CLOUD_CONFIG" ]] ; then
  for t in minimal small small-highmem; do
    cloud_config_needs vm_type "$t"
  done
  for t in 5GB 10GB 100GB ; do 
    cloud_config_needs disk_type "$t"
  done
  for t in diego-ssh-proxy-network-properties cf-router-network-properties cf-tcp-router-network-properties 50GB_ephemeral_disk 100GB_ephemeral_disk ; do 
    cloud_config_needs vm_extensions "$t"
  done

# TODO: check if logic
  if want_feature 'partitioned-network' ; then
    cloud_config_needs network "$(lookup params.cf_core_network cf-core)"
    cloud_config_needs network "$(lookup params.cf_edge_network cf-edge)"
    cloud_config_needs network "$(lookup params.cf_runtime_network cf-runtime)"
  else
    cloud_config_needs network "$(lookup params.network default)"
  fi

  # Check if there were any errors reported from the above checks.
  if check_cloud_config ; then
    describe "  cloud config [#G{OK}]"
  else
    describe "  cloud config [#R{FAILED}]"
    cc_ok=no
  fi
fi

# Upgrade check
version="$(exodus kit_version)"
if [[ -n "${version:-}" ]] && ! new_enough "${version}" "1.10.1"; then
  bail "Please upgrade to cf kit 1.10.1 before upgrading to > 2.0"
fi

# Runtime config checks
runtime_ok=yes

# Check for BOSH DNS
if [[ $(bosh rc | spruce json | jq -r '.addons[] | select(.name == "bosh-dns")') == "" ]]; then
  runtime_ok=no
  describe "  #R{Errors were found} in your runtime-config:"
  describe "    - #R{BOSH DNS is not in the runtime-config, which is required. Refer to}"
  describe "      #R{'genesis man $GENESIS_ENVIRONMENT' for more info.}"
  describe ""
fi

# Check if there were any errors reported from runtime config checks
if [[ "$runtime_ok" == "yes" ]]; then
  describe "  runtime config [#G{OK}]"
else
  describe "  runtime config [#R{FAILED}]"
fi

env_ok=yes
# Environment Parameter checks - none yet!

if [[ "$env_ok" == "yes" ]]; then
  describe "  environment files [#G{OK}]"
else
  describe "  environment files [#R{FAILED}]"
fi

if [[ -n "${version}" ]] && ! new_enough "${version}" "2.0.0-rc1"; then
  # TODO: check if secrets are present
  :

fi

if [[ "$env_ok" == "no" || "$cc_ok" == "no" || "$runtime_ok" == no ]] ; then
  exit 1
fi

