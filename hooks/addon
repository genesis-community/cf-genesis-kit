#!/bin/bash
set -eu
vault="secret/$GENESIS_VAULT_PREFIX"
target=$GENESIS_ENVIRONMENT


list() {
  echo "The following addons are defined:"
  echo
  echo "  login             Log into the Cloud Foundry instance as the"
  echo "                    admin user account.  This will overwrite local"
  echo "                    cf CLI configuration!"
  echo
  echo "  setup-cli         Installs cf CLI plugins like 'Targets', which"
  echo "                    helps to manage multiple Cloud Foundries from a"
  echo "                    single jumpbox."
  echo
  echo "  bind-autoscaler   Binds the Autoscaler service broker to your"
  echo "                    deployed CF. Only works if the autoscaler"
  echo "                    feature was enabled during deploy."
  echo
  echo "  asg               Generates application security group definitions,"
  echo "                    in JSON, which can then be fed into Cloud Foundry."
  echo
  echo "  smoketest         Run the smoke tests errand on the first vm in the"
  echo "                    api instance group."
  echo "  cats              Run the CATS tests."
  echo "                    This is a release engineering feature and should not be run against existing environments. Use with caution"
}


login() {
  if ! cf plugins | grep -q '^cf-targets'; then
    describe "#Y{The cf-targets plugin does not seem to be installed}"
        echo "Install it first, via 'genesis do $GENESIS_ENVIRONMENT -- setup-cli'"
    exit 1
  fi

  base=$(lookup params.base_domain)
  system_domain=$(lookup params.system_domain system.$base)
  api_url=https://api.$system_domain
  password=$(safe read $vault/admin_user:password)

  if want_feature self-signed; then
    cf api $api_url --skip-ssl-validation
  elif [[ "$(lookup params.skip_ssl_validation)" == "true" ]]; then
    cf api $api_url --skip-ssl-validation
  else
    cf api $api_url
  fi

  cf auth admin "$password"
  cf save-target -f $target
  echo ; echo
  cf target
}

cats() {
    #"This is a release engineering feature. This is not supposed to be run on existing envs. Use at your own risk."
    source ci/scripts/cats.sh
    run_cats --local
}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;

login)
  login
  exit 0
  ;;


setup-cli)
  if ! cf list-plugin-repos | grep -q CF-Community; then
    describe 'Adding #G{Cloud Foundry Community} plugins repository...'
    cf add-plugin-repo CF-Community http://plugins.cloudfoundry.org
  fi
  if ! cf plugins | grep -q '^cf-targets'; then
    describe 'Installing the #C{cf-targets} plugin...'
    cf install-plugin -r CF-Community Targets
  fi
  cf plugins
  ;;

asg)
  echo "To allow Cloud Foundry application instances to contact"
  echo "other application instances via the CF gorouters:"
  echo
  lookup params.cf_public_ips '[]' | jq '.[] | { "destination": ., "protocol": "all" }' | jq -s
  echo
  echo "To allow Cloud Floundry application instances to contact"
  echo "the services networks (for consuming brokered services):"
  echo
  lookup params.app_services_networks '[]' | jq '.[] | { "destination": ., "protocol": "all" }' | jq -s
  echo
  ;;

bind-autoscaler)
  if [[ $(exodus autoscaler_enabled) != "1" ]]; then
    echo "This Genesis deployment does not have the Autoscaler feature."
    exit 1
  fi
  login
  username=$(safe read $vault/autoscaler/servicebroker_account:username)
  password=$(safe read $vault/autoscaler/servicebroker_account:password)
  base=$(exodus system_domain)
  url="autoscalerservicebroker.$base"
  if [[ $(exodus self-signed) == "1" ]]; then
    cf create-service-broker autoscaler $username $password http://$url
    echo "Successfully created the service broker."
    exit 0
  fi
  cf create-service-broker autoscaler $username $password https://$url
  echo "Successfully created the service broker."
  exit 0
  ;;

smoketest)
  $GENESIS_BOSH_COMMAND -e $BOSH_ENVIRONMENT -d $BOSH_DEPLOYMENT run-errand smoke_tests --instance uaa/first
  ;;
cats)
  cats
  exit 0
  ;;
*)
  echo "Unrecognized Cloud Foundry Genesis Kit addon."
  list
  exit 1
  ;;
esac
