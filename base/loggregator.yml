---
instance_groups:
- name: doppler
  instances: (( grab params.doppler_instances ))
  vm_type: (( grab params.doppler_vm_type ))
  azs: (( grab params.availability_zones ))
  stemcell: default
  networks:
  - (( replace ))
  - name: (( grab params.cf_internal_network ))
  jobs:
  - name: doppler
    properties:
      doppler:
        etcd: (( grab meta.cf-etcd ))
      loggregator:
        etcd: (( grab meta.cf-etcd ))
        tls:
          ca_cert: (( grab meta.metron_agent_properties.loggregator.tls.ca_cert ))
          doppler:
            cert:           (( vault meta.vault "/loggregator/certs/doppler:certificate" ))
            key:            (( vault meta.vault "/loggregator/certs/doppler:key" ))
      doppler_endpoint:
        shared_secret: (( grab meta.loggregator.endpoint_secret ))
  - name: syslog_drain_binder
    properties:
      loggregator:
        tls:
          syslogdrainbinder:
            cert: (( vault meta.vault "/diego/certs/syslogdrainbinder:certificate" ))
            key:  (( vault meta.vault "/diego/certs/syslogdrainbinder:key" ))
        etcd: (( grab meta.cf-etcd ))
      syslog_drain_binder:
        etcd: (( grab meta.cf-etcd ))
      system_domain: (( grab params.system_domain ))
      cc:
        mutual_tls: (( grab meta.cc_mutual_tls ))
        srv_api_uri: (( grab meta.cc_url ))
      ssl:
        skip_cert_verify: (( grab params.skip_ssl_validation ))
  - name: metron_agent
    properties: (( grab meta.metron_agent_properties ))

- name: log-api
  migrated_from: 
  - name: loggregator_trafficcontroller
  instances: (( grab params.loggregator_instances ))
  vm_type: (( grab params.loggregator_vm_type ))
  azs: (( grab params.availability_zones ))
  stemcell: default
  networks:
  - (( replace ))
  - name: (( grab params.cf_internal_network ))

  jobs:
  - name: loggregator_trafficcontroller
    properties:
      traffic_controller:
        etcd: (( grab meta.cf-etcd ))
      uaa:
        url: (( grab meta.uaa.url ))
        ca_cert: (( grab meta.uaa.ca_cert ))
      loggregator:
        tls:
          cc_trafficcontroller:
            cert: (( vault meta.vault "/diego/certs/trafficcontroller:certificate" ))
            key:  (( vault meta.vault "/diego/certs/trafficcontroller:key" ))
          ca_cert: (( grab meta.metron_agent_properties.loggregator.tls.ca_cert ))
          trafficcontroller:
            cert: (( vault meta.vault "/loggregator/certs/trafficcontroller:certificate" ))
            key:  (( vault meta.vault "/loggregator/certs/trafficcontroller:key" ))
        etcd: (( grab meta.cf-etcd ))
        uaa:
          client_secret: (( grab meta.uaa.doppler_secret ))
      system_domain: (( grab params.system_domain ))
      cc:
        srv_api_uri: (( grab meta.cc_url ))
        mutual_tls:
          ca_cert: (( vault meta.vault "/diego/certs/ca:certificate" ))
      ssl:
        skip_cert_verify: (( grab params.skip_ssl_validation ))
  - name: route_registrar
    properties:
      route_registrar:
        routes:
        - name: loggregator
          uris:
          - (( replace ))
          - (( concat "loggregator." params.system_domain ))
        - name: doppler
          uris:
          - (( replace ))
          - (( concat "doppler." params.system_domain ))
          - (( concat "*.doppler." params.system_domain ))
  - name: metron_agent
    properties: (( grab meta.metron_agent_properties ))

meta:
  loggregator:
    endpoint_secret:        (( vault meta.vault "/loggregator/endpoint:secret" ))

  metron_agent_properties:
    metron_agent:
      deployment: (( grab params.system_domain ))
    metron_endpoint:
      shared_secret: (( grab meta.loggregator.endpoint_secret ))
    loggregator:
      tls:
        ca_cert:                (( vault meta.vault "/loggregator/certs/ca:certificate" ))
        metron:
          cert:            (( vault meta.vault "/loggregator/certs/metron:certificate" ))
          key:             (( vault meta.vault "/loggregator/certs/metron:key" ))

  statsd_injector:
    statsd_injector:
      deployment: (( grab params.system_domain ))
    loggregator:
      tls:
        ca_cert: (( grab meta.metron_agent_properties.loggregator.tls.ca_cert ))
        statsd_injector:
          cert:    (( vault meta.vault "/loggregator/certs/statsdinjector:certificate" ))
          key:     (( vault meta.vault "/loggregator/certs/statsdinjector:key" ))
